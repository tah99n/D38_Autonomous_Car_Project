
AUTONC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000014aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ee  00800060  000014aa  0000153e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001e  0080014e  0080014e  0000162c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000162c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000165c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000308  00000000  00000000  00001698  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002f6c  00000000  00000000  000019a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e85  00000000  00000000  0000490c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019e2  00000000  00000000  00005791  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007cc  00000000  00000000  00007174  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ab7  00000000  00000000  00007940  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001b40  00000000  00000000  000083f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000280  00000000  00000000  00009f37  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3b 03 	jmp	0x676	; 0x676 <__vector_1>
       8:	0c 94 64 03 	jmp	0x6c8	; 0x6c8 <__vector_2>
       c:	0c 94 8d 03 	jmp	0x71a	; 0x71a <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 1d 08 	jmp	0x103a	; 0x103a <__vector_6>
      1c:	0c 94 e5 07 	jmp	0xfca	; 0xfca <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 ab 07 	jmp	0xf56	; 0xf56 <__vector_9>
      28:	0c 94 4c 07 	jmp	0xe98	; 0xe98 <__vector_10>
      2c:	0c 94 11 07 	jmp	0xe22	; 0xe22 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ea       	ldi	r30, 0xAA	; 170
      68:	f4 e1       	ldi	r31, 0x14	; 20
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 34       	cpi	r26, 0x4E	; 78
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	ae e4       	ldi	r26, 0x4E	; 78
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 36       	cpi	r26, 0x6C	; 108
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ca 05 	call	0xb94	; 0xb94 <main>
      8a:	0c 94 53 0a 	jmp	0x14a6	; 0x14a6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <AUTONC_DisplayProjectDetails>:


#include "AUTONC_Interface.h"

void AUTONC_DisplayProjectDetails(void){
	LCD_AmitSendString((u8*) " Autonomous Car");
      92:	81 e6       	ldi	r24, 0x61	; 97
      94:	90 e0       	ldi	r25, 0x00	; 0
      96:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <LCD_AmitSendString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      9a:	2f ef       	ldi	r18, 0xFF	; 255
      9c:	83 ed       	ldi	r24, 0xD3	; 211
      9e:	90 e3       	ldi	r25, 0x30	; 48
      a0:	21 50       	subi	r18, 0x01	; 1
      a2:	80 40       	sbci	r24, 0x00	; 0
      a4:	90 40       	sbci	r25, 0x00	; 0
      a6:	e1 f7       	brne	.-8      	; 0xa0 <AUTONC_DisplayProjectDetails+0xe>
      a8:	00 c0       	rjmp	.+0      	; 0xaa <AUTONC_DisplayProjectDetails+0x18>
      aa:	00 00       	nop
	_delay_ms(1000);
	LCD_clear();
      ac:	0e 94 c7 04 	call	0x98e	; 0x98e <LCD_clear>
	LCD_goToSpecificPosition(LCD_LINE_ONE,3);
      b0:	63 e0       	ldi	r22, 0x03	; 3
      b2:	81 e0       	ldi	r24, 0x01	; 1
      b4:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <LCD_goToSpecificPosition>
	LCD_AmitSendString((u8*) "Graduation");
      b8:	81 e7       	ldi	r24, 0x71	; 113
      ba:	90 e0       	ldi	r25, 0x00	; 0
      bc:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <LCD_AmitSendString>
	LCD_goToSpecificPosition(LCD_LINE_TWO,4);
      c0:	64 e0       	ldi	r22, 0x04	; 4
      c2:	82 e0       	ldi	r24, 0x02	; 2
      c4:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <LCD_goToSpecificPosition>
	LCD_AmitSendString((u8*) "Project");
      c8:	8c e7       	ldi	r24, 0x7C	; 124
      ca:	90 e0       	ldi	r25, 0x00	; 0
      cc:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <LCD_AmitSendString>
      d0:	2f ef       	ldi	r18, 0xFF	; 255
      d2:	83 ed       	ldi	r24, 0xD3	; 211
      d4:	90 e3       	ldi	r25, 0x30	; 48
      d6:	21 50       	subi	r18, 0x01	; 1
      d8:	80 40       	sbci	r24, 0x00	; 0
      da:	90 40       	sbci	r25, 0x00	; 0
      dc:	e1 f7       	brne	.-8      	; 0xd6 <AUTONC_DisplayProjectDetails+0x44>
      de:	00 c0       	rjmp	.+0      	; 0xe0 <AUTONC_DisplayProjectDetails+0x4e>
      e0:	00 00       	nop
	_delay_ms(1000);
	LCD_clear();
      e2:	0e 94 c7 04 	call	0x98e	; 0x98e <LCD_clear>
	LCD_AmitSendString((u8*) " Team Members:");
      e6:	84 e8       	ldi	r24, 0x84	; 132
      e8:	90 e0       	ldi	r25, 0x00	; 0
      ea:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <LCD_AmitSendString>
      ee:	2f ef       	ldi	r18, 0xFF	; 255
      f0:	83 ed       	ldi	r24, 0xD3	; 211
      f2:	90 e3       	ldi	r25, 0x30	; 48
      f4:	21 50       	subi	r18, 0x01	; 1
      f6:	80 40       	sbci	r24, 0x00	; 0
      f8:	90 40       	sbci	r25, 0x00	; 0
      fa:	e1 f7       	brne	.-8      	; 0xf4 <AUTONC_DisplayProjectDetails+0x62>
      fc:	00 c0       	rjmp	.+0      	; 0xfe <AUTONC_DisplayProjectDetails+0x6c>
      fe:	00 00       	nop
	_delay_ms(1000);
	LCD_clear();
     100:	0e 94 c7 04 	call	0x98e	; 0x98e <LCD_clear>
	LCD_AmitSendString((u8*) "-Ammar Mahmoud");
     104:	83 e9       	ldi	r24, 0x93	; 147
     106:	90 e0       	ldi	r25, 0x00	; 0
     108:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <LCD_AmitSendString>
	LCD_goToSpecificPosition(LCD_LINE_TWO,0);
     10c:	60 e0       	ldi	r22, 0x00	; 0
     10e:	82 e0       	ldi	r24, 0x02	; 2
     110:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <LCD_goToSpecificPosition>
	LCD_AmitSendString((u8*) "-Mahmoud Tahoun");
     114:	82 ea       	ldi	r24, 0xA2	; 162
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <LCD_AmitSendString>
     11c:	2f ef       	ldi	r18, 0xFF	; 255
     11e:	83 ed       	ldi	r24, 0xD3	; 211
     120:	90 e3       	ldi	r25, 0x30	; 48
     122:	21 50       	subi	r18, 0x01	; 1
     124:	80 40       	sbci	r24, 0x00	; 0
     126:	90 40       	sbci	r25, 0x00	; 0
     128:	e1 f7       	brne	.-8      	; 0x122 <AUTONC_DisplayProjectDetails+0x90>
     12a:	00 c0       	rjmp	.+0      	; 0x12c <AUTONC_DisplayProjectDetails+0x9a>
     12c:	00 00       	nop
	_delay_ms(1000);
	LCD_clear();
     12e:	0e 94 c7 04 	call	0x98e	; 0x98e <LCD_clear>
	LCD_AmitSendString((u8*) "-Mohamed ElSayed");
     132:	82 eb       	ldi	r24, 0xB2	; 178
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <LCD_AmitSendString>
	LCD_goToSpecificPosition(LCD_LINE_TWO,0);
     13a:	60 e0       	ldi	r22, 0x00	; 0
     13c:	82 e0       	ldi	r24, 0x02	; 2
     13e:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <LCD_goToSpecificPosition>
	LCD_AmitSendString((u8*) "-Mohammed Khalid");
     142:	83 ec       	ldi	r24, 0xC3	; 195
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <LCD_AmitSendString>
     14a:	2f ef       	ldi	r18, 0xFF	; 255
     14c:	83 ed       	ldi	r24, 0xD3	; 211
     14e:	90 e3       	ldi	r25, 0x30	; 48
     150:	21 50       	subi	r18, 0x01	; 1
     152:	80 40       	sbci	r24, 0x00	; 0
     154:	90 40       	sbci	r25, 0x00	; 0
     156:	e1 f7       	brne	.-8      	; 0x150 <AUTONC_DisplayProjectDetails+0xbe>
     158:	00 c0       	rjmp	.+0      	; 0x15a <AUTONC_DisplayProjectDetails+0xc8>
     15a:	00 00       	nop
	_delay_ms(1000);
	LCD_clear();
     15c:	0e 94 c7 04 	call	0x98e	; 0x98e <LCD_clear>
     160:	08 95       	ret

00000162 <AUTONC_init>:
}

void AUTONC_init(void){
	
	USS_Init();
     162:	0e 94 84 08 	call	0x1108	; 0x1108 <USS_Init>
	LCD_Start_AMIT();
     166:	0e 94 a3 04 	call	0x946	; 0x946 <LCD_Start_AMIT>
	LCD_Init();
     16a:	0e 94 28 04 	call	0x850	; 0x850 <LCD_Init>
	DCM_Init();
     16e:	0e 94 1c 01 	call	0x238	; 0x238 <DCM_Init>
	DIO_SetPinDirection(DIO_PORTD,DIO_PIN7,DIO_PIN_OUTPUT);// servo PWM
     172:	41 e0       	ldi	r20, 0x01	; 1
     174:	67 e0       	ldi	r22, 0x07	; 7
     176:	83 e0       	ldi	r24, 0x03	; 3
     178:	0e 94 92 01 	call	0x324	; 0x324 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTA,DIO_PIN3,DIO_PIN_OUTPUT);// BUZZER
     17c:	41 e0       	ldi	r20, 0x01	; 1
     17e:	63 e0       	ldi	r22, 0x03	; 3
     180:	80 e0       	ldi	r24, 0x00	; 0
     182:	0e 94 92 01 	call	0x324	; 0x324 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTD,DIO_PIN3,DIO_PIN_INPUT);// Button  1
     186:	40 e0       	ldi	r20, 0x00	; 0
     188:	63 e0       	ldi	r22, 0x03	; 3
     18a:	83 e0       	ldi	r24, 0x03	; 3
     18c:	0e 94 92 01 	call	0x324	; 0x324 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTD,DIO_PIN2,DIO_PIN_INPUT);// Button  2
     190:	40 e0       	ldi	r20, 0x00	; 0
     192:	62 e0       	ldi	r22, 0x02	; 2
     194:	83 e0       	ldi	r24, 0x03	; 3
     196:	0e 94 92 01 	call	0x324	; 0x324 <DIO_SetPinDirection>
     19a:	08 95       	ret

0000019c <AUTONC_setCarState>:
	
}

void AUTONC_setCarState(u8 Direction){
	
	switch(Direction){
     19c:	82 30       	cpi	r24, 0x02	; 2
     19e:	a1 f0       	breq	.+40     	; 0x1c8 <AUTONC_setCarState+0x2c>
     1a0:	28 f4       	brcc	.+10     	; 0x1ac <AUTONC_setCarState+0x10>
     1a2:	88 23       	and	r24, r24
     1a4:	61 f1       	breq	.+88     	; 0x1fe <AUTONC_setCarState+0x62>
     1a6:	81 30       	cpi	r24, 0x01	; 1
     1a8:	31 f0       	breq	.+12     	; 0x1b6 <AUTONC_setCarState+0x1a>
     1aa:	08 95       	ret
     1ac:	83 30       	cpi	r24, 0x03	; 3
     1ae:	a9 f0       	breq	.+42     	; 0x1da <AUTONC_setCarState+0x3e>
     1b0:	84 30       	cpi	r24, 0x04	; 4
     1b2:	e1 f0       	breq	.+56     	; 0x1ec <AUTONC_setCarState+0x50>
     1b4:	08 95       	ret
		
		case AUTONC_FORWARD:
		DCM_ON(DCM_MOTOR1,DCM_CW);
     1b6:	61 e0       	ldi	r22, 0x01	; 1
     1b8:	81 e0       	ldi	r24, 0x01	; 1
     1ba:	0e 94 3b 01 	call	0x276	; 0x276 <DCM_ON>
		DCM_ON(DCM_MOTOR2,DCM_CW);
     1be:	61 e0       	ldi	r22, 0x01	; 1
     1c0:	82 e0       	ldi	r24, 0x02	; 2
     1c2:	0e 94 3b 01 	call	0x276	; 0x276 <DCM_ON>
		break;
     1c6:	08 95       	ret
		
		case AUTONC_BACKWARD:
		DCM_ON(DCM_MOTOR1,DCM_CCW);
     1c8:	62 e0       	ldi	r22, 0x02	; 2
     1ca:	81 e0       	ldi	r24, 0x01	; 1
     1cc:	0e 94 3b 01 	call	0x276	; 0x276 <DCM_ON>
		DCM_ON(DCM_MOTOR2,DCM_CCW);
     1d0:	62 e0       	ldi	r22, 0x02	; 2
     1d2:	82 e0       	ldi	r24, 0x02	; 2
     1d4:	0e 94 3b 01 	call	0x276	; 0x276 <DCM_ON>
		break;
     1d8:	08 95       	ret
		
		case AUTONC_ROTATE_RIGHT:
		DCM_ON(DCM_MOTOR1,DCM_CCW);
     1da:	62 e0       	ldi	r22, 0x02	; 2
     1dc:	81 e0       	ldi	r24, 0x01	; 1
     1de:	0e 94 3b 01 	call	0x276	; 0x276 <DCM_ON>
		DCM_ON(DCM_MOTOR2,DCM_CW);
     1e2:	61 e0       	ldi	r22, 0x01	; 1
     1e4:	82 e0       	ldi	r24, 0x02	; 2
     1e6:	0e 94 3b 01 	call	0x276	; 0x276 <DCM_ON>
		break;
     1ea:	08 95       	ret
		
		case AUTONC_ROTATE_LEFT:
		DCM_ON(DCM_MOTOR1,DCM_CW);
     1ec:	61 e0       	ldi	r22, 0x01	; 1
     1ee:	81 e0       	ldi	r24, 0x01	; 1
     1f0:	0e 94 3b 01 	call	0x276	; 0x276 <DCM_ON>
		DCM_ON(DCM_MOTOR2,DCM_CCW);
     1f4:	62 e0       	ldi	r22, 0x02	; 2
     1f6:	82 e0       	ldi	r24, 0x02	; 2
     1f8:	0e 94 3b 01 	call	0x276	; 0x276 <DCM_ON>
		break;
     1fc:	08 95       	ret
		
		case AUTONC_STOP:
		DCM_OFF(DCM_MOTOR1);
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	0e 94 81 01 	call	0x302	; 0x302 <DCM_OFF>
		DCM_OFF(DCM_MOTOR2);
     204:	82 e0       	ldi	r24, 0x02	; 2
     206:	0e 94 81 01 	call	0x302	; 0x302 <DCM_OFF>
     20a:	08 95       	ret

0000020c <AUTONC_ControlSpeed>:
     20c:	2f ef       	ldi	r18, 0xFF	; 255
     20e:	81 ee       	ldi	r24, 0xE1	; 225
     210:	94 e0       	ldi	r25, 0x04	; 4
     212:	21 50       	subi	r18, 0x01	; 1
     214:	80 40       	sbci	r24, 0x00	; 0
     216:	90 40       	sbci	r25, 0x00	; 0
     218:	e1 f7       	brne	.-8      	; 0x212 <AUTONC_ControlSpeed+0x6>
     21a:	00 c0       	rjmp	.+0      	; 0x21c <AUTONC_ControlSpeed+0x10>
     21c:	00 00       	nop
	
}

void AUTONC_ControlSpeed(void){
	_delay_ms(100);
	AUTONC_setCarState(AUTONC_STOP);// to control speed
     21e:	80 e0       	ldi	r24, 0x00	; 0
     220:	0e 94 ce 00 	call	0x19c	; 0x19c <AUTONC_setCarState>
     224:	2f ef       	ldi	r18, 0xFF	; 255
     226:	80 e7       	ldi	r24, 0x70	; 112
     228:	92 e0       	ldi	r25, 0x02	; 2
     22a:	21 50       	subi	r18, 0x01	; 1
     22c:	80 40       	sbci	r24, 0x00	; 0
     22e:	90 40       	sbci	r25, 0x00	; 0
     230:	e1 f7       	brne	.-8      	; 0x22a <AUTONC_ControlSpeed+0x1e>
     232:	00 c0       	rjmp	.+0      	; 0x234 <AUTONC_ControlSpeed+0x28>
     234:	00 00       	nop
     236:	08 95       	ret

00000238 <DCM_Init>:
#include "DCM_Interface.h"


void DCM_Init(void){
	
	  DIO_SetPinDirection(DIO_PORTD,DIO_PIN4,DIO_PIN_OUTPUT); //EN1
     238:	41 e0       	ldi	r20, 0x01	; 1
     23a:	64 e0       	ldi	r22, 0x04	; 4
     23c:	83 e0       	ldi	r24, 0x03	; 3
     23e:	0e 94 92 01 	call	0x324	; 0x324 <DIO_SetPinDirection>
	  DIO_SetPinDirection(DIO_PORTD,DIO_PIN5,DIO_PIN_OUTPUT); //EN2
     242:	41 e0       	ldi	r20, 0x01	; 1
     244:	65 e0       	ldi	r22, 0x05	; 5
     246:	83 e0       	ldi	r24, 0x03	; 3
     248:	0e 94 92 01 	call	0x324	; 0x324 <DIO_SetPinDirection>
	  
	  DIO_SetPinDirection(DIO_PORTC,DIO_PIN3,DIO_PIN_OUTPUT);//MA pin1
     24c:	41 e0       	ldi	r20, 0x01	; 1
     24e:	63 e0       	ldi	r22, 0x03	; 3
     250:	82 e0       	ldi	r24, 0x02	; 2
     252:	0e 94 92 01 	call	0x324	; 0x324 <DIO_SetPinDirection>
	  DIO_SetPinDirection(DIO_PORTC,DIO_PIN4,DIO_PIN_OUTPUT);//MA pin2
     256:	41 e0       	ldi	r20, 0x01	; 1
     258:	64 e0       	ldi	r22, 0x04	; 4
     25a:	82 e0       	ldi	r24, 0x02	; 2
     25c:	0e 94 92 01 	call	0x324	; 0x324 <DIO_SetPinDirection>
	  DIO_SetPinDirection(DIO_PORTC,DIO_PIN5,DIO_PIN_OUTPUT);//MB pin1
     260:	41 e0       	ldi	r20, 0x01	; 1
     262:	65 e0       	ldi	r22, 0x05	; 5
     264:	82 e0       	ldi	r24, 0x02	; 2
     266:	0e 94 92 01 	call	0x324	; 0x324 <DIO_SetPinDirection>
	  DIO_SetPinDirection(DIO_PORTC,DIO_PIN6,DIO_PIN_OUTPUT);//MB pin2
     26a:	41 e0       	ldi	r20, 0x01	; 1
     26c:	66 e0       	ldi	r22, 0x06	; 6
     26e:	82 e0       	ldi	r24, 0x02	; 2
     270:	0e 94 92 01 	call	0x324	; 0x324 <DIO_SetPinDirection>
     274:	08 95       	ret

00000276 <DCM_ON>:
}



void DCM_ON(u8 MotorNumber,u8 Direction){
     276:	cf 93       	push	r28
     278:	c6 2f       	mov	r28, r22
	
	switch(MotorNumber){
     27a:	81 30       	cpi	r24, 0x01	; 1
     27c:	19 f0       	breq	.+6      	; 0x284 <DCM_ON+0xe>
     27e:	82 30       	cpi	r24, 0x02	; 2
     280:	01 f1       	breq	.+64     	; 0x2c2 <DCM_ON+0x4c>
     282:	3d c0       	rjmp	.+122    	; 0x2fe <DCM_ON+0x88>
		case DCM_MOTOR1:
		DIO_SetPinValue(DIO_PORTD,DIO_PIN4,DIO_PIN_HIGH);
     284:	41 e0       	ldi	r20, 0x01	; 1
     286:	64 e0       	ldi	r22, 0x04	; 4
     288:	83 e0       	ldi	r24, 0x03	; 3
     28a:	0e 94 08 02 	call	0x410	; 0x410 <DIO_SetPinValue>
		if (Direction==DCM_CW)
     28e:	c1 30       	cpi	r28, 0x01	; 1
     290:	59 f4       	brne	.+22     	; 0x2a8 <DCM_ON+0x32>
		{
			 DIO_SetPinValue(DIO_PORTC,DIO_PIN3,DIO_PIN_HIGH);
     292:	41 e0       	ldi	r20, 0x01	; 1
     294:	63 e0       	ldi	r22, 0x03	; 3
     296:	82 e0       	ldi	r24, 0x02	; 2
     298:	0e 94 08 02 	call	0x410	; 0x410 <DIO_SetPinValue>
			 DIO_SetPinValue(DIO_PORTC,DIO_PIN4,DIO_PIN_LOW);
     29c:	40 e0       	ldi	r20, 0x00	; 0
     29e:	64 e0       	ldi	r22, 0x04	; 4
     2a0:	82 e0       	ldi	r24, 0x02	; 2
     2a2:	0e 94 08 02 	call	0x410	; 0x410 <DIO_SetPinValue>
     2a6:	2b c0       	rjmp	.+86     	; 0x2fe <DCM_ON+0x88>
		}
		else if (Direction==DCM_CCW){
     2a8:	c2 30       	cpi	r28, 0x02	; 2
     2aa:	49 f5       	brne	.+82     	; 0x2fe <DCM_ON+0x88>
			DIO_SetPinValue(DIO_PORTC,DIO_PIN3,DIO_PIN_LOW);
     2ac:	40 e0       	ldi	r20, 0x00	; 0
     2ae:	63 e0       	ldi	r22, 0x03	; 3
     2b0:	82 e0       	ldi	r24, 0x02	; 2
     2b2:	0e 94 08 02 	call	0x410	; 0x410 <DIO_SetPinValue>
			DIO_SetPinValue(DIO_PORTC,DIO_PIN4,DIO_PIN_HIGH);
     2b6:	41 e0       	ldi	r20, 0x01	; 1
     2b8:	64 e0       	ldi	r22, 0x04	; 4
     2ba:	82 e0       	ldi	r24, 0x02	; 2
     2bc:	0e 94 08 02 	call	0x410	; 0x410 <DIO_SetPinValue>
     2c0:	1e c0       	rjmp	.+60     	; 0x2fe <DCM_ON+0x88>
			
		}
		break;
		
		case DCM_MOTOR2:
		DIO_SetPinValue(DIO_PORTD,DIO_PIN5,DIO_PIN_HIGH);
     2c2:	41 e0       	ldi	r20, 0x01	; 1
     2c4:	65 e0       	ldi	r22, 0x05	; 5
     2c6:	83 e0       	ldi	r24, 0x03	; 3
     2c8:	0e 94 08 02 	call	0x410	; 0x410 <DIO_SetPinValue>
		if (Direction==DCM_CW)
     2cc:	c1 30       	cpi	r28, 0x01	; 1
     2ce:	59 f4       	brne	.+22     	; 0x2e6 <DCM_ON+0x70>
		{
			DIO_SetPinValue(DIO_PORTC,DIO_PIN5,DIO_PIN_HIGH);
     2d0:	41 e0       	ldi	r20, 0x01	; 1
     2d2:	65 e0       	ldi	r22, 0x05	; 5
     2d4:	82 e0       	ldi	r24, 0x02	; 2
     2d6:	0e 94 08 02 	call	0x410	; 0x410 <DIO_SetPinValue>
			DIO_SetPinValue(DIO_PORTC,DIO_PIN6,DIO_PIN_LOW);
     2da:	40 e0       	ldi	r20, 0x00	; 0
     2dc:	66 e0       	ldi	r22, 0x06	; 6
     2de:	82 e0       	ldi	r24, 0x02	; 2
     2e0:	0e 94 08 02 	call	0x410	; 0x410 <DIO_SetPinValue>
     2e4:	0c c0       	rjmp	.+24     	; 0x2fe <DCM_ON+0x88>
		}
		else if (Direction==DCM_CCW){
     2e6:	c2 30       	cpi	r28, 0x02	; 2
     2e8:	51 f4       	brne	.+20     	; 0x2fe <DCM_ON+0x88>
			DIO_SetPinValue(DIO_PORTC,DIO_PIN5,DIO_PIN_LOW);
     2ea:	40 e0       	ldi	r20, 0x00	; 0
     2ec:	65 e0       	ldi	r22, 0x05	; 5
     2ee:	82 e0       	ldi	r24, 0x02	; 2
     2f0:	0e 94 08 02 	call	0x410	; 0x410 <DIO_SetPinValue>
			DIO_SetPinValue(DIO_PORTC,DIO_PIN6,DIO_PIN_HIGH);
     2f4:	41 e0       	ldi	r20, 0x01	; 1
     2f6:	66 e0       	ldi	r22, 0x06	; 6
     2f8:	82 e0       	ldi	r24, 0x02	; 2
     2fa:	0e 94 08 02 	call	0x410	; 0x410 <DIO_SetPinValue>
			
		}
		break;	
	}
}
     2fe:	cf 91       	pop	r28
     300:	08 95       	ret

00000302 <DCM_OFF>:

void DCM_OFF(u8 MotorNumber){
	switch(MotorNumber){
     302:	81 30       	cpi	r24, 0x01	; 1
     304:	19 f0       	breq	.+6      	; 0x30c <DCM_OFF+0xa>
     306:	82 30       	cpi	r24, 0x02	; 2
     308:	39 f0       	breq	.+14     	; 0x318 <DCM_OFF+0x16>
     30a:	08 95       	ret
		case DCM_MOTOR1:
		DIO_SetPinValue(DIO_PORTD,DIO_PIN4,DIO_PIN_LOW);
     30c:	40 e0       	ldi	r20, 0x00	; 0
     30e:	64 e0       	ldi	r22, 0x04	; 4
     310:	83 e0       	ldi	r24, 0x03	; 3
     312:	0e 94 08 02 	call	0x410	; 0x410 <DIO_SetPinValue>
		break;
     316:	08 95       	ret
		case DCM_MOTOR2:
		DIO_SetPinValue(DIO_PORTD,DIO_PIN5,DIO_PIN_LOW);
     318:	40 e0       	ldi	r20, 0x00	; 0
     31a:	65 e0       	ldi	r22, 0x05	; 5
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	0e 94 08 02 	call	0x410	; 0x410 <DIO_SetPinValue>
     322:	08 95       	ret

00000324 <DIO_SetPinDirection>:
#include "DIO_Interface.h"


void DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PinDirction)
{
	if( (PortId<=3) && (PinId<=7) && ((PinDirction==DIO_PIN_INPUT) || (PinDirction==DIO_PIN_OUTPUT)) ){
     324:	84 30       	cpi	r24, 0x04	; 4
     326:	08 f0       	brcs	.+2      	; 0x32a <DIO_SetPinDirection+0x6>
     328:	72 c0       	rjmp	.+228    	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
     32a:	68 30       	cpi	r22, 0x08	; 8
     32c:	08 f0       	brcs	.+2      	; 0x330 <DIO_SetPinDirection+0xc>
     32e:	6f c0       	rjmp	.+222    	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
     330:	42 30       	cpi	r20, 0x02	; 2
     332:	08 f0       	brcs	.+2      	; 0x336 <DIO_SetPinDirection+0x12>
     334:	6c c0       	rjmp	.+216    	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
	switch(PortId){
     336:	81 30       	cpi	r24, 0x01	; 1
     338:	01 f1       	breq	.+64     	; 0x37a <DIO_SetPinDirection+0x56>
     33a:	30 f0       	brcs	.+12     	; 0x348 <DIO_SetPinDirection+0x24>
     33c:	82 30       	cpi	r24, 0x02	; 2
     33e:	b1 f1       	breq	.+108    	; 0x3ac <DIO_SetPinDirection+0x88>
     340:	83 30       	cpi	r24, 0x03	; 3
     342:	09 f4       	brne	.+2      	; 0x346 <DIO_SetPinDirection+0x22>
     344:	4c c0       	rjmp	.+152    	; 0x3de <DIO_SetPinDirection+0xba>
     346:	08 95       	ret
		case 0://DIO PORTA
		if(PinDirction==DIO_PIN_OUTPUT){
     348:	41 30       	cpi	r20, 0x01	; 1
     34a:	59 f4       	brne	.+22     	; 0x362 <DIO_SetPinDirection+0x3e>
			SET_BIT(DDRA,PinId);
     34c:	2a b3       	in	r18, 0x1a	; 26
     34e:	81 e0       	ldi	r24, 0x01	; 1
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	02 c0       	rjmp	.+4      	; 0x358 <DIO_SetPinDirection+0x34>
     354:	88 0f       	add	r24, r24
     356:	99 1f       	adc	r25, r25
     358:	6a 95       	dec	r22
     35a:	e2 f7       	brpl	.-8      	; 0x354 <DIO_SetPinDirection+0x30>
     35c:	82 2b       	or	r24, r18
     35e:	8a bb       	out	0x1a, r24	; 26
     360:	08 95       	ret
		}
		else{
			CLR_BIT(DDRA,PinId);
     362:	2a b3       	in	r18, 0x1a	; 26
     364:	81 e0       	ldi	r24, 0x01	; 1
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	02 c0       	rjmp	.+4      	; 0x36e <DIO_SetPinDirection+0x4a>
     36a:	88 0f       	add	r24, r24
     36c:	99 1f       	adc	r25, r25
     36e:	6a 95       	dec	r22
     370:	e2 f7       	brpl	.-8      	; 0x36a <DIO_SetPinDirection+0x46>
     372:	80 95       	com	r24
     374:	82 23       	and	r24, r18
     376:	8a bb       	out	0x1a, r24	; 26
     378:	08 95       	ret
		}
		break;
	case 1://DIO PORTB
	if(PinDirction==DIO_PIN_OUTPUT){
     37a:	41 30       	cpi	r20, 0x01	; 1
     37c:	59 f4       	brne	.+22     	; 0x394 <DIO_SetPinDirection+0x70>
		SET_BIT(DDRB,PinId);
     37e:	27 b3       	in	r18, 0x17	; 23
     380:	81 e0       	ldi	r24, 0x01	; 1
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	02 c0       	rjmp	.+4      	; 0x38a <DIO_SetPinDirection+0x66>
     386:	88 0f       	add	r24, r24
     388:	99 1f       	adc	r25, r25
     38a:	6a 95       	dec	r22
     38c:	e2 f7       	brpl	.-8      	; 0x386 <DIO_SetPinDirection+0x62>
     38e:	82 2b       	or	r24, r18
     390:	87 bb       	out	0x17, r24	; 23
     392:	08 95       	ret
	}
	else{
		CLR_BIT(DDRB,PinId);
     394:	27 b3       	in	r18, 0x17	; 23
     396:	81 e0       	ldi	r24, 0x01	; 1
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	02 c0       	rjmp	.+4      	; 0x3a0 <DIO_SetPinDirection+0x7c>
     39c:	88 0f       	add	r24, r24
     39e:	99 1f       	adc	r25, r25
     3a0:	6a 95       	dec	r22
     3a2:	e2 f7       	brpl	.-8      	; 0x39c <DIO_SetPinDirection+0x78>
     3a4:	80 95       	com	r24
     3a6:	82 23       	and	r24, r18
     3a8:	87 bb       	out	0x17, r24	; 23
     3aa:	08 95       	ret
	}
	break;
	case 2://DIO PORTC
	if(PinDirction==DIO_PIN_OUTPUT){
     3ac:	41 30       	cpi	r20, 0x01	; 1
     3ae:	59 f4       	brne	.+22     	; 0x3c6 <DIO_SetPinDirection+0xa2>
		SET_BIT(DDRC,PinId);
     3b0:	24 b3       	in	r18, 0x14	; 20
     3b2:	81 e0       	ldi	r24, 0x01	; 1
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	02 c0       	rjmp	.+4      	; 0x3bc <DIO_SetPinDirection+0x98>
     3b8:	88 0f       	add	r24, r24
     3ba:	99 1f       	adc	r25, r25
     3bc:	6a 95       	dec	r22
     3be:	e2 f7       	brpl	.-8      	; 0x3b8 <DIO_SetPinDirection+0x94>
     3c0:	82 2b       	or	r24, r18
     3c2:	84 bb       	out	0x14, r24	; 20
     3c4:	08 95       	ret
	}
	else{
		CLR_BIT(DDRC,PinId);
     3c6:	24 b3       	in	r18, 0x14	; 20
     3c8:	81 e0       	ldi	r24, 0x01	; 1
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <DIO_SetPinDirection+0xae>
     3ce:	88 0f       	add	r24, r24
     3d0:	99 1f       	adc	r25, r25
     3d2:	6a 95       	dec	r22
     3d4:	e2 f7       	brpl	.-8      	; 0x3ce <DIO_SetPinDirection+0xaa>
     3d6:	80 95       	com	r24
     3d8:	82 23       	and	r24, r18
     3da:	84 bb       	out	0x14, r24	; 20
     3dc:	08 95       	ret
	}
	break;
	case 3://DIO PORTD
	if(PinDirction==DIO_PIN_OUTPUT){
     3de:	41 30       	cpi	r20, 0x01	; 1
     3e0:	59 f4       	brne	.+22     	; 0x3f8 <DIO_SetPinDirection+0xd4>
		SET_BIT(DDRD,PinId);
     3e2:	21 b3       	in	r18, 0x11	; 17
     3e4:	81 e0       	ldi	r24, 0x01	; 1
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	02 c0       	rjmp	.+4      	; 0x3ee <DIO_SetPinDirection+0xca>
     3ea:	88 0f       	add	r24, r24
     3ec:	99 1f       	adc	r25, r25
     3ee:	6a 95       	dec	r22
     3f0:	e2 f7       	brpl	.-8      	; 0x3ea <DIO_SetPinDirection+0xc6>
     3f2:	82 2b       	or	r24, r18
     3f4:	81 bb       	out	0x11, r24	; 17
     3f6:	08 95       	ret
	}
	else{
		CLR_BIT(DDRD,PinId);
     3f8:	21 b3       	in	r18, 0x11	; 17
     3fa:	81 e0       	ldi	r24, 0x01	; 1
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	02 c0       	rjmp	.+4      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
     400:	88 0f       	add	r24, r24
     402:	99 1f       	adc	r25, r25
     404:	6a 95       	dec	r22
     406:	e2 f7       	brpl	.-8      	; 0x400 <__EEPROM_REGION_LENGTH__>
     408:	80 95       	com	r24
     40a:	82 23       	and	r24, r18
     40c:	81 bb       	out	0x11, r24	; 17
     40e:	08 95       	ret

00000410 <DIO_SetPinValue>:
}
}


void DIO_SetPinValue (u8 PortId,u8 PinId,u8 PinValue){
		if( (PortId<=3) && (PinId<=7) && ((PinValue==DIO_PIN_HIGH) || (PinValue==DIO_PIN_LOW)) ){
     410:	84 30       	cpi	r24, 0x04	; 4
     412:	08 f0       	brcs	.+2      	; 0x416 <DIO_SetPinValue+0x6>
     414:	72 c0       	rjmp	.+228    	; 0x4fa <DIO_SetPinValue+0xea>
     416:	68 30       	cpi	r22, 0x08	; 8
     418:	08 f0       	brcs	.+2      	; 0x41c <DIO_SetPinValue+0xc>
     41a:	6f c0       	rjmp	.+222    	; 0x4fa <DIO_SetPinValue+0xea>
     41c:	42 30       	cpi	r20, 0x02	; 2
     41e:	08 f0       	brcs	.+2      	; 0x422 <DIO_SetPinValue+0x12>
     420:	6c c0       	rjmp	.+216    	; 0x4fa <DIO_SetPinValue+0xea>
				switch(PortId){
     422:	81 30       	cpi	r24, 0x01	; 1
     424:	01 f1       	breq	.+64     	; 0x466 <DIO_SetPinValue+0x56>
     426:	30 f0       	brcs	.+12     	; 0x434 <DIO_SetPinValue+0x24>
     428:	82 30       	cpi	r24, 0x02	; 2
     42a:	b1 f1       	breq	.+108    	; 0x498 <DIO_SetPinValue+0x88>
     42c:	83 30       	cpi	r24, 0x03	; 3
     42e:	09 f4       	brne	.+2      	; 0x432 <DIO_SetPinValue+0x22>
     430:	4c c0       	rjmp	.+152    	; 0x4ca <DIO_SetPinValue+0xba>
     432:	08 95       	ret
		           case 0://DIO PORTA
				   if(PinValue==DIO_PIN_HIGH){
     434:	41 30       	cpi	r20, 0x01	; 1
     436:	59 f4       	brne	.+22     	; 0x44e <DIO_SetPinValue+0x3e>
					 	SET_BIT(PORTA,PinId); 
     438:	2b b3       	in	r18, 0x1b	; 27
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	02 c0       	rjmp	.+4      	; 0x444 <DIO_SetPinValue+0x34>
     440:	88 0f       	add	r24, r24
     442:	99 1f       	adc	r25, r25
     444:	6a 95       	dec	r22
     446:	e2 f7       	brpl	.-8      	; 0x440 <DIO_SetPinValue+0x30>
     448:	82 2b       	or	r24, r18
     44a:	8b bb       	out	0x1b, r24	; 27
     44c:	08 95       	ret
				   }
				   else{
					  		CLR_BIT(PORTA,PinId);
     44e:	2b b3       	in	r18, 0x1b	; 27
     450:	81 e0       	ldi	r24, 0x01	; 1
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	02 c0       	rjmp	.+4      	; 0x45a <DIO_SetPinValue+0x4a>
     456:	88 0f       	add	r24, r24
     458:	99 1f       	adc	r25, r25
     45a:	6a 95       	dec	r22
     45c:	e2 f7       	brpl	.-8      	; 0x456 <DIO_SetPinValue+0x46>
     45e:	80 95       	com	r24
     460:	82 23       	and	r24, r18
     462:	8b bb       	out	0x1b, r24	; 27
     464:	08 95       	ret
				   }
				   	break;

				   case 1://DIO PORTB
				   if(PinValue==DIO_PIN_HIGH){
     466:	41 30       	cpi	r20, 0x01	; 1
     468:	59 f4       	brne	.+22     	; 0x480 <DIO_SetPinValue+0x70>
					   SET_BIT(PORTB,PinId);
     46a:	28 b3       	in	r18, 0x18	; 24
     46c:	81 e0       	ldi	r24, 0x01	; 1
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	02 c0       	rjmp	.+4      	; 0x476 <DIO_SetPinValue+0x66>
     472:	88 0f       	add	r24, r24
     474:	99 1f       	adc	r25, r25
     476:	6a 95       	dec	r22
     478:	e2 f7       	brpl	.-8      	; 0x472 <DIO_SetPinValue+0x62>
     47a:	82 2b       	or	r24, r18
     47c:	88 bb       	out	0x18, r24	; 24
     47e:	08 95       	ret
				   }
				   else{
					   CLR_BIT(PORTB,PinId);
     480:	28 b3       	in	r18, 0x18	; 24
     482:	81 e0       	ldi	r24, 0x01	; 1
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	02 c0       	rjmp	.+4      	; 0x48c <DIO_SetPinValue+0x7c>
     488:	88 0f       	add	r24, r24
     48a:	99 1f       	adc	r25, r25
     48c:	6a 95       	dec	r22
     48e:	e2 f7       	brpl	.-8      	; 0x488 <DIO_SetPinValue+0x78>
     490:	80 95       	com	r24
     492:	82 23       	and	r24, r18
     494:	88 bb       	out	0x18, r24	; 24
     496:	08 95       	ret
				   }
				   	break;

				   case 2://DIO PORTC
				   if(PinValue==DIO_PIN_HIGH){
     498:	41 30       	cpi	r20, 0x01	; 1
     49a:	59 f4       	brne	.+22     	; 0x4b2 <DIO_SetPinValue+0xa2>
					   SET_BIT(PORTC,PinId);
     49c:	25 b3       	in	r18, 0x15	; 21
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <DIO_SetPinValue+0x98>
     4a4:	88 0f       	add	r24, r24
     4a6:	99 1f       	adc	r25, r25
     4a8:	6a 95       	dec	r22
     4aa:	e2 f7       	brpl	.-8      	; 0x4a4 <DIO_SetPinValue+0x94>
     4ac:	82 2b       	or	r24, r18
     4ae:	85 bb       	out	0x15, r24	; 21
     4b0:	08 95       	ret
				   }
				   else{
					   CLR_BIT(PORTC,PinId);
     4b2:	25 b3       	in	r18, 0x15	; 21
     4b4:	81 e0       	ldi	r24, 0x01	; 1
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	02 c0       	rjmp	.+4      	; 0x4be <DIO_SetPinValue+0xae>
     4ba:	88 0f       	add	r24, r24
     4bc:	99 1f       	adc	r25, r25
     4be:	6a 95       	dec	r22
     4c0:	e2 f7       	brpl	.-8      	; 0x4ba <DIO_SetPinValue+0xaa>
     4c2:	80 95       	com	r24
     4c4:	82 23       	and	r24, r18
     4c6:	85 bb       	out	0x15, r24	; 21
     4c8:	08 95       	ret
				   }
				   	break;

				   case 3://DIO PORTD
				   if(PinValue==DIO_PIN_HIGH){
     4ca:	41 30       	cpi	r20, 0x01	; 1
     4cc:	59 f4       	brne	.+22     	; 0x4e4 <DIO_SetPinValue+0xd4>
					   SET_BIT(PORTD,PinId);
     4ce:	22 b3       	in	r18, 0x12	; 18
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	02 c0       	rjmp	.+4      	; 0x4da <DIO_SetPinValue+0xca>
     4d6:	88 0f       	add	r24, r24
     4d8:	99 1f       	adc	r25, r25
     4da:	6a 95       	dec	r22
     4dc:	e2 f7       	brpl	.-8      	; 0x4d6 <DIO_SetPinValue+0xc6>
     4de:	82 2b       	or	r24, r18
     4e0:	82 bb       	out	0x12, r24	; 18
     4e2:	08 95       	ret
				   }
				   else{
					   CLR_BIT(PORTD,PinId);
     4e4:	22 b3       	in	r18, 0x12	; 18
     4e6:	81 e0       	ldi	r24, 0x01	; 1
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <DIO_SetPinValue+0xe0>
     4ec:	88 0f       	add	r24, r24
     4ee:	99 1f       	adc	r25, r25
     4f0:	6a 95       	dec	r22
     4f2:	e2 f7       	brpl	.-8      	; 0x4ec <DIO_SetPinValue+0xdc>
     4f4:	80 95       	com	r24
     4f6:	82 23       	and	r24, r18
     4f8:	82 bb       	out	0x12, r24	; 18
     4fa:	08 95       	ret

000004fc <DIO_GetPinValue>:
		}
}


void DIO_GetPinValue (u8 PortId,u8 PinId,u8* PinValue){
	if((PortId<=3) && (PinId<=7) && (PinValue!=NULL)){
     4fc:	84 30       	cpi	r24, 0x04	; 4
     4fe:	08 f0       	brcs	.+2      	; 0x502 <DIO_GetPinValue+0x6>
     500:	4e c0       	rjmp	.+156    	; 0x59e <DIO_GetPinValue+0xa2>
     502:	68 30       	cpi	r22, 0x08	; 8
     504:	08 f0       	brcs	.+2      	; 0x508 <DIO_GetPinValue+0xc>
     506:	4b c0       	rjmp	.+150    	; 0x59e <DIO_GetPinValue+0xa2>
     508:	41 15       	cp	r20, r1
     50a:	51 05       	cpc	r21, r1
     50c:	09 f4       	brne	.+2      	; 0x510 <DIO_GetPinValue+0x14>
     50e:	47 c0       	rjmp	.+142    	; 0x59e <DIO_GetPinValue+0xa2>
		switch(PortId){
     510:	81 30       	cpi	r24, 0x01	; 1
     512:	b1 f0       	breq	.+44     	; 0x540 <DIO_GetPinValue+0x44>
     514:	28 f0       	brcs	.+10     	; 0x520 <DIO_GetPinValue+0x24>
     516:	82 30       	cpi	r24, 0x02	; 2
     518:	19 f1       	breq	.+70     	; 0x560 <DIO_GetPinValue+0x64>
     51a:	83 30       	cpi	r24, 0x03	; 3
     51c:	89 f1       	breq	.+98     	; 0x580 <DIO_GetPinValue+0x84>
     51e:	08 95       	ret
			case 0://DIO PORTA
			if(DIO_PIN_HIGH==GET_BIT(PINA,PinId)){
     520:	89 b3       	in	r24, 0x19	; 25
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	02 c0       	rjmp	.+4      	; 0x52a <DIO_GetPinValue+0x2e>
     526:	95 95       	asr	r25
     528:	87 95       	ror	r24
     52a:	6a 95       	dec	r22
     52c:	e2 f7       	brpl	.-8      	; 0x526 <DIO_GetPinValue+0x2a>
     52e:	80 ff       	sbrs	r24, 0
     530:	04 c0       	rjmp	.+8      	; 0x53a <DIO_GetPinValue+0x3e>
				*PinValue = DIO_PIN_HIGH;
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	fa 01       	movw	r30, r20
     536:	80 83       	st	Z, r24
     538:	08 95       	ret
			}
			else{
				*PinValue = DIO_PIN_LOW;
     53a:	fa 01       	movw	r30, r20
     53c:	10 82       	st	Z, r1
     53e:	08 95       	ret
			}
			break;
			case 1://DIO PORTB
			if(DIO_PIN_HIGH==GET_BIT(PINB,PinId)){
     540:	86 b3       	in	r24, 0x16	; 22
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	02 c0       	rjmp	.+4      	; 0x54a <DIO_GetPinValue+0x4e>
     546:	95 95       	asr	r25
     548:	87 95       	ror	r24
     54a:	6a 95       	dec	r22
     54c:	e2 f7       	brpl	.-8      	; 0x546 <DIO_GetPinValue+0x4a>
     54e:	80 ff       	sbrs	r24, 0
     550:	04 c0       	rjmp	.+8      	; 0x55a <DIO_GetPinValue+0x5e>
				*PinValue = DIO_PIN_HIGH;
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	fa 01       	movw	r30, r20
     556:	80 83       	st	Z, r24
     558:	08 95       	ret
			}
			else{
				*PinValue = DIO_PIN_LOW;
     55a:	fa 01       	movw	r30, r20
     55c:	10 82       	st	Z, r1
     55e:	08 95       	ret
			}
			break;
			case 2://DIO PORTC
			if(DIO_PIN_HIGH==GET_BIT(PINC,PinId)){
     560:	83 b3       	in	r24, 0x13	; 19
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	02 c0       	rjmp	.+4      	; 0x56a <DIO_GetPinValue+0x6e>
     566:	95 95       	asr	r25
     568:	87 95       	ror	r24
     56a:	6a 95       	dec	r22
     56c:	e2 f7       	brpl	.-8      	; 0x566 <DIO_GetPinValue+0x6a>
     56e:	80 ff       	sbrs	r24, 0
     570:	04 c0       	rjmp	.+8      	; 0x57a <DIO_GetPinValue+0x7e>
				*PinValue = DIO_PIN_HIGH;
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	fa 01       	movw	r30, r20
     576:	80 83       	st	Z, r24
     578:	08 95       	ret
			}
			else{
				*PinValue = DIO_PIN_LOW;
     57a:	fa 01       	movw	r30, r20
     57c:	10 82       	st	Z, r1
     57e:	08 95       	ret
			}
			break;
			case 3://DIO PORTD
			if(DIO_PIN_HIGH==GET_BIT(PIND,PinId)){
     580:	80 b3       	in	r24, 0x10	; 16
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	02 c0       	rjmp	.+4      	; 0x58a <DIO_GetPinValue+0x8e>
     586:	95 95       	asr	r25
     588:	87 95       	ror	r24
     58a:	6a 95       	dec	r22
     58c:	e2 f7       	brpl	.-8      	; 0x586 <DIO_GetPinValue+0x8a>
     58e:	80 ff       	sbrs	r24, 0
     590:	04 c0       	rjmp	.+8      	; 0x59a <DIO_GetPinValue+0x9e>
				*PinValue = DIO_PIN_HIGH;
     592:	81 e0       	ldi	r24, 0x01	; 1
     594:	fa 01       	movw	r30, r20
     596:	80 83       	st	Z, r24
     598:	08 95       	ret
			}
			else{
				*PinValue = DIO_PIN_LOW;
     59a:	fa 01       	movw	r30, r20
     59c:	10 82       	st	Z, r1
     59e:	08 95       	ret

000005a0 <EXTI_Enable>:
}

// ISR function prototype EXTI2
void EXTI_INT2SetCallBack(void(*ptr)(void)){
	if(ptr!=NULL){
		INT2pCallBack=ptr;
     5a0:	81 30       	cpi	r24, 0x01	; 1
     5a2:	61 f1       	breq	.+88     	; 0x5fc <EXTI_Enable+0x5c>
     5a4:	20 f0       	brcs	.+8      	; 0x5ae <EXTI_Enable+0xe>
     5a6:	82 30       	cpi	r24, 0x02	; 2
     5a8:	09 f4       	brne	.+2      	; 0x5ac <EXTI_Enable+0xc>
     5aa:	4f c0       	rjmp	.+158    	; 0x64a <EXTI_Enable+0xaa>
     5ac:	08 95       	ret
     5ae:	61 11       	cpse	r22, r1
     5b0:	07 c0       	rjmp	.+14     	; 0x5c0 <EXTI_Enable+0x20>
     5b2:	85 b7       	in	r24, 0x35	; 53
     5b4:	81 60       	ori	r24, 0x01	; 1
     5b6:	85 bf       	out	0x35, r24	; 53
     5b8:	85 b7       	in	r24, 0x35	; 53
     5ba:	82 60       	ori	r24, 0x02	; 2
     5bc:	85 bf       	out	0x35, r24	; 53
     5be:	1a c0       	rjmp	.+52     	; 0x5f4 <EXTI_Enable+0x54>
     5c0:	61 30       	cpi	r22, 0x01	; 1
     5c2:	39 f4       	brne	.+14     	; 0x5d2 <EXTI_Enable+0x32>
     5c4:	85 b7       	in	r24, 0x35	; 53
     5c6:	8e 7f       	andi	r24, 0xFE	; 254
     5c8:	85 bf       	out	0x35, r24	; 53
     5ca:	85 b7       	in	r24, 0x35	; 53
     5cc:	82 60       	ori	r24, 0x02	; 2
     5ce:	85 bf       	out	0x35, r24	; 53
     5d0:	11 c0       	rjmp	.+34     	; 0x5f4 <EXTI_Enable+0x54>
     5d2:	62 30       	cpi	r22, 0x02	; 2
     5d4:	39 f4       	brne	.+14     	; 0x5e4 <EXTI_Enable+0x44>
     5d6:	85 b7       	in	r24, 0x35	; 53
     5d8:	8e 7f       	andi	r24, 0xFE	; 254
     5da:	85 bf       	out	0x35, r24	; 53
     5dc:	85 b7       	in	r24, 0x35	; 53
     5de:	8d 7f       	andi	r24, 0xFD	; 253
     5e0:	85 bf       	out	0x35, r24	; 53
     5e2:	08 c0       	rjmp	.+16     	; 0x5f4 <EXTI_Enable+0x54>
     5e4:	63 30       	cpi	r22, 0x03	; 3
     5e6:	31 f4       	brne	.+12     	; 0x5f4 <EXTI_Enable+0x54>
     5e8:	85 b7       	in	r24, 0x35	; 53
     5ea:	81 60       	ori	r24, 0x01	; 1
     5ec:	85 bf       	out	0x35, r24	; 53
     5ee:	85 b7       	in	r24, 0x35	; 53
     5f0:	8d 7f       	andi	r24, 0xFD	; 253
     5f2:	85 bf       	out	0x35, r24	; 53
     5f4:	8b b7       	in	r24, 0x3b	; 59
     5f6:	80 64       	ori	r24, 0x40	; 64
     5f8:	8b bf       	out	0x3b, r24	; 59
     5fa:	08 95       	ret
     5fc:	61 11       	cpse	r22, r1
     5fe:	07 c0       	rjmp	.+14     	; 0x60e <EXTI_Enable+0x6e>
     600:	85 b7       	in	r24, 0x35	; 53
     602:	84 60       	ori	r24, 0x04	; 4
     604:	85 bf       	out	0x35, r24	; 53
     606:	85 b7       	in	r24, 0x35	; 53
     608:	88 60       	ori	r24, 0x08	; 8
     60a:	85 bf       	out	0x35, r24	; 53
     60c:	1a c0       	rjmp	.+52     	; 0x642 <EXTI_Enable+0xa2>
     60e:	61 30       	cpi	r22, 0x01	; 1
     610:	39 f4       	brne	.+14     	; 0x620 <EXTI_Enable+0x80>
     612:	85 b7       	in	r24, 0x35	; 53
     614:	8b 7f       	andi	r24, 0xFB	; 251
     616:	85 bf       	out	0x35, r24	; 53
     618:	85 b7       	in	r24, 0x35	; 53
     61a:	88 60       	ori	r24, 0x08	; 8
     61c:	85 bf       	out	0x35, r24	; 53
     61e:	11 c0       	rjmp	.+34     	; 0x642 <EXTI_Enable+0xa2>
     620:	62 30       	cpi	r22, 0x02	; 2
     622:	39 f4       	brne	.+14     	; 0x632 <EXTI_Enable+0x92>
     624:	85 b7       	in	r24, 0x35	; 53
     626:	8b 7f       	andi	r24, 0xFB	; 251
     628:	85 bf       	out	0x35, r24	; 53
     62a:	85 b7       	in	r24, 0x35	; 53
     62c:	87 7f       	andi	r24, 0xF7	; 247
     62e:	85 bf       	out	0x35, r24	; 53
     630:	08 c0       	rjmp	.+16     	; 0x642 <EXTI_Enable+0xa2>
     632:	63 30       	cpi	r22, 0x03	; 3
     634:	31 f4       	brne	.+12     	; 0x642 <EXTI_Enable+0xa2>
     636:	85 b7       	in	r24, 0x35	; 53
     638:	84 60       	ori	r24, 0x04	; 4
     63a:	85 bf       	out	0x35, r24	; 53
     63c:	85 b7       	in	r24, 0x35	; 53
     63e:	87 7f       	andi	r24, 0xF7	; 247
     640:	85 bf       	out	0x35, r24	; 53
     642:	8b b7       	in	r24, 0x3b	; 59
     644:	80 68       	ori	r24, 0x80	; 128
     646:	8b bf       	out	0x3b, r24	; 59
     648:	08 95       	ret
     64a:	61 11       	cpse	r22, r1
     64c:	04 c0       	rjmp	.+8      	; 0x656 <EXTI_Enable+0xb6>
     64e:	84 b7       	in	r24, 0x34	; 52
     650:	80 64       	ori	r24, 0x40	; 64
     652:	84 bf       	out	0x34, r24	; 52
     654:	05 c0       	rjmp	.+10     	; 0x660 <EXTI_Enable+0xc0>
     656:	61 30       	cpi	r22, 0x01	; 1
     658:	19 f4       	brne	.+6      	; 0x660 <EXTI_Enable+0xc0>
     65a:	84 b7       	in	r24, 0x34	; 52
     65c:	8f 7b       	andi	r24, 0xBF	; 191
     65e:	84 bf       	out	0x34, r24	; 52
     660:	8b b7       	in	r24, 0x3b	; 59
     662:	80 62       	ori	r24, 0x20	; 32
     664:	8b bf       	out	0x3b, r24	; 59
     666:	08 95       	ret

00000668 <EXTI_INT0SetCallBack>:
     668:	00 97       	sbiw	r24, 0x00	; 0
     66a:	21 f0       	breq	.+8      	; 0x674 <EXTI_INT0SetCallBack+0xc>
     66c:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <INT0pCallBack+0x1>
     670:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <INT0pCallBack>
     674:	08 95       	ret

00000676 <__vector_1>:
     676:	1f 92       	push	r1
     678:	0f 92       	push	r0
     67a:	0f b6       	in	r0, 0x3f	; 63
     67c:	0f 92       	push	r0
     67e:	11 24       	eor	r1, r1
     680:	2f 93       	push	r18
     682:	3f 93       	push	r19
     684:	4f 93       	push	r20
     686:	5f 93       	push	r21
     688:	6f 93       	push	r22
     68a:	7f 93       	push	r23
     68c:	8f 93       	push	r24
     68e:	9f 93       	push	r25
     690:	af 93       	push	r26
     692:	bf 93       	push	r27
     694:	ef 93       	push	r30
     696:	ff 93       	push	r31
     698:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <INT0pCallBack>
     69c:	f0 91 53 01 	lds	r31, 0x0153	; 0x800153 <INT0pCallBack+0x1>
     6a0:	30 97       	sbiw	r30, 0x00	; 0
     6a2:	09 f0       	breq	.+2      	; 0x6a6 <__vector_1+0x30>
     6a4:	09 95       	icall
     6a6:	ff 91       	pop	r31
     6a8:	ef 91       	pop	r30
     6aa:	bf 91       	pop	r27
     6ac:	af 91       	pop	r26
     6ae:	9f 91       	pop	r25
     6b0:	8f 91       	pop	r24
     6b2:	7f 91       	pop	r23
     6b4:	6f 91       	pop	r22
     6b6:	5f 91       	pop	r21
     6b8:	4f 91       	pop	r20
     6ba:	3f 91       	pop	r19
     6bc:	2f 91       	pop	r18
     6be:	0f 90       	pop	r0
     6c0:	0f be       	out	0x3f, r0	; 63
     6c2:	0f 90       	pop	r0
     6c4:	1f 90       	pop	r1
     6c6:	18 95       	reti

000006c8 <__vector_2>:
     6c8:	1f 92       	push	r1
     6ca:	0f 92       	push	r0
     6cc:	0f b6       	in	r0, 0x3f	; 63
     6ce:	0f 92       	push	r0
     6d0:	11 24       	eor	r1, r1
     6d2:	2f 93       	push	r18
     6d4:	3f 93       	push	r19
     6d6:	4f 93       	push	r20
     6d8:	5f 93       	push	r21
     6da:	6f 93       	push	r22
     6dc:	7f 93       	push	r23
     6de:	8f 93       	push	r24
     6e0:	9f 93       	push	r25
     6e2:	af 93       	push	r26
     6e4:	bf 93       	push	r27
     6e6:	ef 93       	push	r30
     6e8:	ff 93       	push	r31
     6ea:	e0 91 50 01 	lds	r30, 0x0150	; 0x800150 <INT1pCallBack>
     6ee:	f0 91 51 01 	lds	r31, 0x0151	; 0x800151 <INT1pCallBack+0x1>
     6f2:	30 97       	sbiw	r30, 0x00	; 0
     6f4:	09 f0       	breq	.+2      	; 0x6f8 <__vector_2+0x30>
     6f6:	09 95       	icall
     6f8:	ff 91       	pop	r31
     6fa:	ef 91       	pop	r30
     6fc:	bf 91       	pop	r27
     6fe:	af 91       	pop	r26
     700:	9f 91       	pop	r25
     702:	8f 91       	pop	r24
     704:	7f 91       	pop	r23
     706:	6f 91       	pop	r22
     708:	5f 91       	pop	r21
     70a:	4f 91       	pop	r20
     70c:	3f 91       	pop	r19
     70e:	2f 91       	pop	r18
     710:	0f 90       	pop	r0
     712:	0f be       	out	0x3f, r0	; 63
     714:	0f 90       	pop	r0
     716:	1f 90       	pop	r1
     718:	18 95       	reti

0000071a <__vector_3>:
	}
}

void __vector_3(void) __attribute__ ((signal));
void __vector_3(void){
     71a:	1f 92       	push	r1
     71c:	0f 92       	push	r0
     71e:	0f b6       	in	r0, 0x3f	; 63
     720:	0f 92       	push	r0
     722:	11 24       	eor	r1, r1
     724:	2f 93       	push	r18
     726:	3f 93       	push	r19
     728:	4f 93       	push	r20
     72a:	5f 93       	push	r21
     72c:	6f 93       	push	r22
     72e:	7f 93       	push	r23
     730:	8f 93       	push	r24
     732:	9f 93       	push	r25
     734:	af 93       	push	r26
     736:	bf 93       	push	r27
     738:	ef 93       	push	r30
     73a:	ff 93       	push	r31
	
	if(INT2pCallBack!=NULL){
     73c:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <__data_end>
     740:	f0 91 4f 01 	lds	r31, 0x014F	; 0x80014f <__data_end+0x1>
     744:	30 97       	sbiw	r30, 0x00	; 0
     746:	09 f0       	breq	.+2      	; 0x74a <__vector_3+0x30>
		INT2pCallBack();
     748:	09 95       	icall
	}
     74a:	ff 91       	pop	r31
     74c:	ef 91       	pop	r30
     74e:	bf 91       	pop	r27
     750:	af 91       	pop	r26
     752:	9f 91       	pop	r25
     754:	8f 91       	pop	r24
     756:	7f 91       	pop	r23
     758:	6f 91       	pop	r22
     75a:	5f 91       	pop	r21
     75c:	4f 91       	pop	r20
     75e:	3f 91       	pop	r19
     760:	2f 91       	pop	r18
     762:	0f 90       	pop	r0
     764:	0f be       	out	0x3f, r0	; 63
     766:	0f 90       	pop	r0
     768:	1f 90       	pop	r1
     76a:	18 95       	reti

0000076c <GI_Enable>:

//MCAL
#include "GI_Interface.h"

void GI_Enable  (void){
	SET_BIT(SREG,7);// Set Status Register
     76c:	8f b7       	in	r24, 0x3f	; 63
     76e:	80 68       	ori	r24, 0x80	; 128
     770:	8f bf       	out	0x3f, r24	; 63
     772:	08 95       	ret

00000774 <WriteHalfPort>:
     774:	cf 93       	push	r28
     776:	c8 2f       	mov	r28, r24
     778:	80 ff       	sbrs	r24, 0
     77a:	06 c0       	rjmp	.+12     	; 0x788 <WriteHalfPort+0x14>
     77c:	41 e0       	ldi	r20, 0x01	; 1
     77e:	64 e0       	ldi	r22, 0x04	; 4
     780:	80 e0       	ldi	r24, 0x00	; 0
     782:	0e 94 08 02 	call	0x410	; 0x410 <DIO_SetPinValue>
     786:	05 c0       	rjmp	.+10     	; 0x792 <WriteHalfPort+0x1e>
     788:	40 e0       	ldi	r20, 0x00	; 0
     78a:	64 e0       	ldi	r22, 0x04	; 4
     78c:	80 e0       	ldi	r24, 0x00	; 0
     78e:	0e 94 08 02 	call	0x410	; 0x410 <DIO_SetPinValue>
     792:	c1 ff       	sbrs	r28, 1
     794:	06 c0       	rjmp	.+12     	; 0x7a2 <WriteHalfPort+0x2e>
     796:	41 e0       	ldi	r20, 0x01	; 1
     798:	65 e0       	ldi	r22, 0x05	; 5
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	0e 94 08 02 	call	0x410	; 0x410 <DIO_SetPinValue>
     7a0:	05 c0       	rjmp	.+10     	; 0x7ac <WriteHalfPort+0x38>
     7a2:	40 e0       	ldi	r20, 0x00	; 0
     7a4:	65 e0       	ldi	r22, 0x05	; 5
     7a6:	80 e0       	ldi	r24, 0x00	; 0
     7a8:	0e 94 08 02 	call	0x410	; 0x410 <DIO_SetPinValue>
     7ac:	c2 ff       	sbrs	r28, 2
     7ae:	06 c0       	rjmp	.+12     	; 0x7bc <WriteHalfPort+0x48>
     7b0:	41 e0       	ldi	r20, 0x01	; 1
     7b2:	66 e0       	ldi	r22, 0x06	; 6
     7b4:	80 e0       	ldi	r24, 0x00	; 0
     7b6:	0e 94 08 02 	call	0x410	; 0x410 <DIO_SetPinValue>
     7ba:	05 c0       	rjmp	.+10     	; 0x7c6 <WriteHalfPort+0x52>
     7bc:	40 e0       	ldi	r20, 0x00	; 0
     7be:	66 e0       	ldi	r22, 0x06	; 6
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	0e 94 08 02 	call	0x410	; 0x410 <DIO_SetPinValue>
     7c6:	c3 ff       	sbrs	r28, 3
     7c8:	06 c0       	rjmp	.+12     	; 0x7d6 <WriteHalfPort+0x62>
     7ca:	41 e0       	ldi	r20, 0x01	; 1
     7cc:	67 e0       	ldi	r22, 0x07	; 7
     7ce:	80 e0       	ldi	r24, 0x00	; 0
     7d0:	0e 94 08 02 	call	0x410	; 0x410 <DIO_SetPinValue>
     7d4:	05 c0       	rjmp	.+10     	; 0x7e0 <WriteHalfPort+0x6c>
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	67 e0       	ldi	r22, 0x07	; 7
     7da:	80 e0       	ldi	r24, 0x00	; 0
     7dc:	0e 94 08 02 	call	0x410	; 0x410 <DIO_SetPinValue>
     7e0:	cf 91       	pop	r28
     7e2:	08 95       	ret

000007e4 <LCD_SendCom>:
     7e4:	cf 93       	push	r28
     7e6:	c8 2f       	mov	r28, r24
     7e8:	40 e0       	ldi	r20, 0x00	; 0
     7ea:	61 e0       	ldi	r22, 0x01	; 1
     7ec:	81 e0       	ldi	r24, 0x01	; 1
     7ee:	0e 94 08 02 	call	0x410	; 0x410 <DIO_SetPinValue>
     7f2:	40 e0       	ldi	r20, 0x00	; 0
     7f4:	62 e0       	ldi	r22, 0x02	; 2
     7f6:	81 e0       	ldi	r24, 0x01	; 1
     7f8:	0e 94 08 02 	call	0x410	; 0x410 <DIO_SetPinValue>
     7fc:	8c 2f       	mov	r24, r28
     7fe:	82 95       	swap	r24
     800:	8f 70       	andi	r24, 0x0F	; 15
     802:	0e 94 ba 03 	call	0x774	; 0x774 <WriteHalfPort>
     806:	41 e0       	ldi	r20, 0x01	; 1
     808:	63 e0       	ldi	r22, 0x03	; 3
     80a:	81 e0       	ldi	r24, 0x01	; 1
     80c:	0e 94 08 02 	call	0x410	; 0x410 <DIO_SetPinValue>
     810:	8f e9       	ldi	r24, 0x9F	; 159
     812:	9f e0       	ldi	r25, 0x0F	; 15
     814:	01 97       	sbiw	r24, 0x01	; 1
     816:	f1 f7       	brne	.-4      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
     818:	00 c0       	rjmp	.+0      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
     81a:	00 00       	nop
     81c:	40 e0       	ldi	r20, 0x00	; 0
     81e:	63 e0       	ldi	r22, 0x03	; 3
     820:	81 e0       	ldi	r24, 0x01	; 1
     822:	0e 94 08 02 	call	0x410	; 0x410 <DIO_SetPinValue>
     826:	8c 2f       	mov	r24, r28
     828:	0e 94 ba 03 	call	0x774	; 0x774 <WriteHalfPort>
     82c:	41 e0       	ldi	r20, 0x01	; 1
     82e:	63 e0       	ldi	r22, 0x03	; 3
     830:	81 e0       	ldi	r24, 0x01	; 1
     832:	0e 94 08 02 	call	0x410	; 0x410 <DIO_SetPinValue>
     836:	8f e9       	ldi	r24, 0x9F	; 159
     838:	9f e0       	ldi	r25, 0x0F	; 15
     83a:	01 97       	sbiw	r24, 0x01	; 1
     83c:	f1 f7       	brne	.-4      	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
     83e:	00 c0       	rjmp	.+0      	; 0x840 <__DATA_REGION_LENGTH__+0x40>
     840:	00 00       	nop
     842:	40 e0       	ldi	r20, 0x00	; 0
     844:	63 e0       	ldi	r22, 0x03	; 3
     846:	81 e0       	ldi	r24, 0x01	; 1
     848:	0e 94 08 02 	call	0x410	; 0x410 <DIO_SetPinValue>
     84c:	cf 91       	pop	r28
     84e:	08 95       	ret

00000850 <LCD_Init>:
     850:	2f e7       	ldi	r18, 0x7F	; 127
     852:	85 eb       	ldi	r24, 0xB5	; 181
     854:	91 e0       	ldi	r25, 0x01	; 1
     856:	21 50       	subi	r18, 0x01	; 1
     858:	80 40       	sbci	r24, 0x00	; 0
     85a:	90 40       	sbci	r25, 0x00	; 0
     85c:	e1 f7       	brne	.-8      	; 0x856 <LCD_Init+0x6>
     85e:	00 c0       	rjmp	.+0      	; 0x860 <__stack+0x1>
     860:	00 00       	nop
     862:	40 e0       	ldi	r20, 0x00	; 0
     864:	61 e0       	ldi	r22, 0x01	; 1
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	0e 94 08 02 	call	0x410	; 0x410 <DIO_SetPinValue>
     86c:	40 e0       	ldi	r20, 0x00	; 0
     86e:	62 e0       	ldi	r22, 0x02	; 2
     870:	81 e0       	ldi	r24, 0x01	; 1
     872:	0e 94 08 02 	call	0x410	; 0x410 <DIO_SetPinValue>
     876:	82 e0       	ldi	r24, 0x02	; 2
     878:	0e 94 ba 03 	call	0x774	; 0x774 <WriteHalfPort>
     87c:	41 e0       	ldi	r20, 0x01	; 1
     87e:	63 e0       	ldi	r22, 0x03	; 3
     880:	81 e0       	ldi	r24, 0x01	; 1
     882:	0e 94 08 02 	call	0x410	; 0x410 <DIO_SetPinValue>
     886:	8f e9       	ldi	r24, 0x9F	; 159
     888:	9f e0       	ldi	r25, 0x0F	; 15
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	f1 f7       	brne	.-4      	; 0x88a <__stack+0x2b>
     88e:	00 c0       	rjmp	.+0      	; 0x890 <__stack+0x31>
     890:	00 00       	nop
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	63 e0       	ldi	r22, 0x03	; 3
     896:	81 e0       	ldi	r24, 0x01	; 1
     898:	0e 94 08 02 	call	0x410	; 0x410 <DIO_SetPinValue>
     89c:	88 e2       	ldi	r24, 0x28	; 40
     89e:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <LCD_SendCom>
     8a2:	90 ef       	ldi	r25, 0xF0	; 240
     8a4:	9a 95       	dec	r25
     8a6:	f1 f7       	brne	.-4      	; 0x8a4 <__stack+0x45>
     8a8:	8c e0       	ldi	r24, 0x0C	; 12
     8aa:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <LCD_SendCom>
     8ae:	20 ef       	ldi	r18, 0xF0	; 240
     8b0:	2a 95       	dec	r18
     8b2:	f1 f7       	brne	.-4      	; 0x8b0 <__stack+0x51>
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <LCD_SendCom>
     8ba:	8f e3       	ldi	r24, 0x3F	; 63
     8bc:	9f e1       	ldi	r25, 0x1F	; 31
     8be:	01 97       	sbiw	r24, 0x01	; 1
     8c0:	f1 f7       	brne	.-4      	; 0x8be <__stack+0x5f>
     8c2:	00 c0       	rjmp	.+0      	; 0x8c4 <__stack+0x65>
     8c4:	00 00       	nop
     8c6:	86 e0       	ldi	r24, 0x06	; 6
     8c8:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <LCD_SendCom>
     8cc:	8f e3       	ldi	r24, 0x3F	; 63
     8ce:	9f e1       	ldi	r25, 0x1F	; 31
     8d0:	01 97       	sbiw	r24, 0x01	; 1
     8d2:	f1 f7       	brne	.-4      	; 0x8d0 <__stack+0x71>
     8d4:	00 c0       	rjmp	.+0      	; 0x8d6 <__stack+0x77>
     8d6:	00 00       	nop
     8d8:	08 95       	ret

000008da <LCD_SendChar>:
     8da:	cf 93       	push	r28
     8dc:	c8 2f       	mov	r28, r24
     8de:	41 e0       	ldi	r20, 0x01	; 1
     8e0:	61 e0       	ldi	r22, 0x01	; 1
     8e2:	81 e0       	ldi	r24, 0x01	; 1
     8e4:	0e 94 08 02 	call	0x410	; 0x410 <DIO_SetPinValue>
     8e8:	40 e0       	ldi	r20, 0x00	; 0
     8ea:	62 e0       	ldi	r22, 0x02	; 2
     8ec:	81 e0       	ldi	r24, 0x01	; 1
     8ee:	0e 94 08 02 	call	0x410	; 0x410 <DIO_SetPinValue>
     8f2:	8c 2f       	mov	r24, r28
     8f4:	82 95       	swap	r24
     8f6:	8f 70       	andi	r24, 0x0F	; 15
     8f8:	0e 94 ba 03 	call	0x774	; 0x774 <WriteHalfPort>
     8fc:	41 e0       	ldi	r20, 0x01	; 1
     8fe:	63 e0       	ldi	r22, 0x03	; 3
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	0e 94 08 02 	call	0x410	; 0x410 <DIO_SetPinValue>
     906:	8f e9       	ldi	r24, 0x9F	; 159
     908:	9f e0       	ldi	r25, 0x0F	; 15
     90a:	01 97       	sbiw	r24, 0x01	; 1
     90c:	f1 f7       	brne	.-4      	; 0x90a <LCD_SendChar+0x30>
     90e:	00 c0       	rjmp	.+0      	; 0x910 <LCD_SendChar+0x36>
     910:	00 00       	nop
     912:	40 e0       	ldi	r20, 0x00	; 0
     914:	63 e0       	ldi	r22, 0x03	; 3
     916:	81 e0       	ldi	r24, 0x01	; 1
     918:	0e 94 08 02 	call	0x410	; 0x410 <DIO_SetPinValue>
     91c:	8c 2f       	mov	r24, r28
     91e:	0e 94 ba 03 	call	0x774	; 0x774 <WriteHalfPort>
     922:	41 e0       	ldi	r20, 0x01	; 1
     924:	63 e0       	ldi	r22, 0x03	; 3
     926:	81 e0       	ldi	r24, 0x01	; 1
     928:	0e 94 08 02 	call	0x410	; 0x410 <DIO_SetPinValue>
     92c:	8f e9       	ldi	r24, 0x9F	; 159
     92e:	9f e0       	ldi	r25, 0x0F	; 15
     930:	01 97       	sbiw	r24, 0x01	; 1
     932:	f1 f7       	brne	.-4      	; 0x930 <LCD_SendChar+0x56>
     934:	00 c0       	rjmp	.+0      	; 0x936 <LCD_SendChar+0x5c>
     936:	00 00       	nop
     938:	40 e0       	ldi	r20, 0x00	; 0
     93a:	63 e0       	ldi	r22, 0x03	; 3
     93c:	81 e0       	ldi	r24, 0x01	; 1
     93e:	0e 94 08 02 	call	0x410	; 0x410 <DIO_SetPinValue>
     942:	cf 91       	pop	r28
     944:	08 95       	ret

00000946 <LCD_Start_AMIT>:
     946:	41 e0       	ldi	r20, 0x01	; 1
     948:	64 e0       	ldi	r22, 0x04	; 4
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	0e 94 92 01 	call	0x324	; 0x324 <DIO_SetPinDirection>
     950:	41 e0       	ldi	r20, 0x01	; 1
     952:	65 e0       	ldi	r22, 0x05	; 5
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	0e 94 92 01 	call	0x324	; 0x324 <DIO_SetPinDirection>
     95a:	41 e0       	ldi	r20, 0x01	; 1
     95c:	66 e0       	ldi	r22, 0x06	; 6
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	0e 94 92 01 	call	0x324	; 0x324 <DIO_SetPinDirection>
     964:	41 e0       	ldi	r20, 0x01	; 1
     966:	67 e0       	ldi	r22, 0x07	; 7
     968:	80 e0       	ldi	r24, 0x00	; 0
     96a:	0e 94 92 01 	call	0x324	; 0x324 <DIO_SetPinDirection>
     96e:	41 e0       	ldi	r20, 0x01	; 1
     970:	61 e0       	ldi	r22, 0x01	; 1
     972:	81 e0       	ldi	r24, 0x01	; 1
     974:	0e 94 92 01 	call	0x324	; 0x324 <DIO_SetPinDirection>
     978:	41 e0       	ldi	r20, 0x01	; 1
     97a:	62 e0       	ldi	r22, 0x02	; 2
     97c:	81 e0       	ldi	r24, 0x01	; 1
     97e:	0e 94 92 01 	call	0x324	; 0x324 <DIO_SetPinDirection>
     982:	41 e0       	ldi	r20, 0x01	; 1
     984:	63 e0       	ldi	r22, 0x03	; 3
     986:	81 e0       	ldi	r24, 0x01	; 1
     988:	0e 94 92 01 	call	0x324	; 0x324 <DIO_SetPinDirection>
     98c:	08 95       	ret

0000098e <LCD_clear>:
     98e:	81 e0       	ldi	r24, 0x01	; 1
     990:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <LCD_SendCom>
     994:	8f e3       	ldi	r24, 0x3F	; 63
     996:	9f e1       	ldi	r25, 0x1F	; 31
     998:	01 97       	sbiw	r24, 0x01	; 1
     99a:	f1 f7       	brne	.-4      	; 0x998 <LCD_clear+0xa>
     99c:	00 c0       	rjmp	.+0      	; 0x99e <LCD_clear+0x10>
     99e:	00 00       	nop
     9a0:	08 95       	ret

000009a2 <LCD_goToSpecificPosition>:
}


void LCD_goToSpecificPosition(u8 LineNumber, u8 Position){
	
	if(LineNumber == LCD_LINE_ONE){
     9a2:	81 30       	cpi	r24, 0x01	; 1
     9a4:	39 f4       	brne	.+14     	; 0x9b4 <LCD_goToSpecificPosition+0x12>
		if(LineNumber <= 15)
     9a6:	80 31       	cpi	r24, 0x10	; 16
     9a8:	68 f4       	brcc	.+26     	; 0x9c4 <LCD_goToSpecificPosition+0x22>
		{
			LCD_SendCom(0x80 + Position);
     9aa:	80 e8       	ldi	r24, 0x80	; 128
     9ac:	86 0f       	add	r24, r22
     9ae:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <LCD_SendCom>
     9b2:	08 95       	ret
		}
	}

	else if (LineNumber == LCD_LINE_TWO)
     9b4:	82 30       	cpi	r24, 0x02	; 2
     9b6:	31 f4       	brne	.+12     	; 0x9c4 <LCD_goToSpecificPosition+0x22>
	{
		if(Position <= 15)
     9b8:	60 31       	cpi	r22, 0x10	; 16
     9ba:	20 f4       	brcc	.+8      	; 0x9c4 <LCD_goToSpecificPosition+0x22>
		{
			LCD_SendCom(0xc0 + Position);
     9bc:	80 ec       	ldi	r24, 0xC0	; 192
     9be:	86 0f       	add	r24, r22
     9c0:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <LCD_SendCom>
     9c4:	08 95       	ret

000009c6 <LCD_AmitSendString>:
		LCD_SendChar(String[StringLength]);
		StringLength++;
	}
}
}
void LCD_AmitSendString(u8*String){
     9c6:	cf 92       	push	r12
     9c8:	df 92       	push	r13
     9ca:	ef 92       	push	r14
     9cc:	ff 92       	push	r15
     9ce:	1f 93       	push	r17
     9d0:	cf 93       	push	r28
     9d2:	df 93       	push	r29
     9d4:	ec 01       	movw	r28, r24
if(String!=NULL){
     9d6:	89 2b       	or	r24, r25
     9d8:	19 f4       	brne	.+6      	; 0x9e0 <LCD_AmitSendString+0x1a>
     9da:	67 c0       	rjmp	.+206    	; 0xaaa <LCD_AmitSendString+0xe4>
	
u8 StringLength=0,j,flag=0;
while (String[StringLength]!='\0'){
	StringLength++;
     9dc:	9f 5f       	subi	r25, 0xFF	; 255
     9de:	01 c0       	rjmp	.+2      	; 0x9e2 <LCD_AmitSendString+0x1c>
     9e0:	90 e0       	ldi	r25, 0x00	; 0
}
void LCD_AmitSendString(u8*String){
if(String!=NULL){
	
u8 StringLength=0,j,flag=0;
while (String[StringLength]!='\0'){
     9e2:	fe 01       	movw	r30, r28
     9e4:	e9 0f       	add	r30, r25
     9e6:	f1 1d       	adc	r31, r1
     9e8:	20 81       	ld	r18, Z
     9ea:	21 11       	cpse	r18, r1
     9ec:	f7 cf       	rjmp	.-18     	; 0x9dc <LCD_AmitSendString+0x16>
	StringLength++;
}
if(StringLength<=16)goto Normal;
     9ee:	91 31       	cpi	r25, 0x11	; 17
     9f0:	78 f0       	brcs	.+30     	; 0xa10 <LCD_AmitSendString+0x4a>
     9f2:	30 e0       	ldi	r19, 0x00	; 0
     9f4:	80 e1       	ldi	r24, 0x10	; 16
for(j=16;j>=0;j--){
	if(String[j]!=' ') flag++;
     9f6:	fe 01       	movw	r30, r28
     9f8:	e8 0f       	add	r30, r24
     9fa:	f1 1d       	adc	r31, r1
     9fc:	20 81       	ld	r18, Z
     9fe:	20 32       	cpi	r18, 0x20	; 32
     a00:	19 f0       	breq	.+6      	; 0xa08 <LCD_AmitSendString+0x42>
     a02:	3f 5f       	subi	r19, 0xFF	; 255
u8 StringLength=0,j,flag=0;
while (String[StringLength]!='\0'){
	StringLength++;
}
if(StringLength<=16)goto Normal;
for(j=16;j>=0;j--){
     a04:	81 50       	subi	r24, 0x01	; 1
	if(String[j]!=' ') flag++;
		else{break;}
}
     a06:	f7 cf       	rjmp	.-18     	; 0x9f6 <LCD_AmitSendString+0x30>

if (StringLength<=16||flag==16) {goto Normal;}
     a08:	91 31       	cpi	r25, 0x11	; 17
     a0a:	10 f0       	brcs	.+4      	; 0xa10 <LCD_AmitSendString+0x4a>
     a0c:	30 31       	cpi	r19, 0x10	; 16
     a0e:	e9 f4       	brne	.+58     	; 0xa4a <LCD_AmitSendString+0x84>
else {goto WithSpace;}
	
Normal:
if(StringLength<=32){
     a10:	91 32       	cpi	r25, 0x21	; 33
     a12:	68 f0       	brcs	.+26     	; 0xa2e <LCD_AmitSendString+0x68>
     a14:	15 c0       	rjmp	.+42     	; 0xa40 <LCD_AmitSendString+0x7a>
	StringLength=0;
	while (String[StringLength]!='\0')
	{
		if(StringLength==16) LCD_goToSpecificPosition(LCD_LINE_TWO,0);
     a16:	10 31       	cpi	r17, 0x10	; 16
     a18:	21 f4       	brne	.+8      	; 0xa22 <LCD_AmitSendString+0x5c>
     a1a:	60 e0       	ldi	r22, 0x00	; 0
     a1c:	82 e0       	ldi	r24, 0x02	; 2
     a1e:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <LCD_goToSpecificPosition>
		LCD_SendChar(String[StringLength]);
     a22:	f7 01       	movw	r30, r14
     a24:	80 81       	ld	r24, Z
     a26:	0e 94 6d 04 	call	0x8da	; 0x8da <LCD_SendChar>
		StringLength++;
     a2a:	1f 5f       	subi	r17, 0xFF	; 255
     a2c:	01 c0       	rjmp	.+2      	; 0xa30 <LCD_AmitSendString+0x6a>
     a2e:	10 e0       	ldi	r17, 0x00	; 0
else {goto WithSpace;}
	
Normal:
if(StringLength<=32){
	StringLength=0;
	while (String[StringLength]!='\0')
     a30:	7e 01       	movw	r14, r28
     a32:	e1 0e       	add	r14, r17
     a34:	f1 1c       	adc	r15, r1
     a36:	f7 01       	movw	r30, r14
     a38:	80 81       	ld	r24, Z
     a3a:	81 11       	cpse	r24, r1
     a3c:	ec cf       	rjmp	.-40     	; 0xa16 <LCD_AmitSendString+0x50>
     a3e:	35 c0       	rjmp	.+106    	; 0xaaa <LCD_AmitSendString+0xe4>
		LCD_SendChar(String[StringLength]);
		StringLength++;
	}
}

else LCD_AmitSendString((u8*)"No Space To Print your txt");
     a40:	84 ed       	ldi	r24, 0xD4	; 212
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <LCD_AmitSendString>
     a48:	30 c0       	rjmp	.+96     	; 0xaaa <LCD_AmitSendString+0xe4>
     a4a:	e1 2c       	mov	r14, r1
     a4c:	80 e1       	ldi	r24, 0x10	; 16
		return;
		
WithSpace:
flag=0;
for(j=16;j>=0;j--){
	if(String[j]!=' ') flag++;
     a4e:	fe 01       	movw	r30, r28
     a50:	e8 0f       	add	r30, r24
     a52:	f1 1d       	adc	r31, r1
     a54:	20 81       	ld	r18, Z
     a56:	20 32       	cpi	r18, 0x20	; 32
     a58:	19 f0       	breq	.+6      	; 0xa60 <LCD_AmitSendString+0x9a>
     a5a:	e3 94       	inc	r14
else LCD_AmitSendString((u8*)"No Space To Print your txt");
		return;
		
WithSpace:
flag=0;
for(j=16;j>=0;j--){
     a5c:	81 50       	subi	r24, 0x01	; 1
	if(String[j]!=' ') flag++;
	else{break;}
}
     a5e:	f7 cf       	rjmp	.-18     	; 0xa4e <LCD_AmitSendString+0x88>
if((StringLength+flag-1)<=32){
     a60:	f1 2c       	mov	r15, r1
     a62:	97 01       	movw	r18, r14
     a64:	29 0f       	add	r18, r25
     a66:	31 1d       	adc	r19, r1
     a68:	c9 01       	movw	r24, r18
     a6a:	01 97       	sbiw	r24, 0x01	; 1
     a6c:	81 97       	sbiw	r24, 0x21	; 33
     a6e:	84 f0       	brlt	.+32     	; 0xa90 <LCD_AmitSendString+0xca>
     a70:	18 c0       	rjmp	.+48     	; 0xaa2 <LCD_AmitSendString+0xdc>
	StringLength=0;
	while (String[StringLength]!='\0')
	{
	if((StringLength+flag-1)==16){
     a72:	c7 01       	movw	r24, r14
     a74:	81 0f       	add	r24, r17
     a76:	91 1d       	adc	r25, r1
     a78:	41 97       	sbiw	r24, 0x11	; 17
     a7a:	21 f4       	brne	.+8      	; 0xa84 <LCD_AmitSendString+0xbe>
		LCD_goToSpecificPosition(LCD_LINE_TWO,0);
     a7c:	60 e0       	ldi	r22, 0x00	; 0
     a7e:	82 e0       	ldi	r24, 0x02	; 2
     a80:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <LCD_goToSpecificPosition>
	}
		LCD_SendChar(String[StringLength]);
     a84:	f6 01       	movw	r30, r12
     a86:	80 81       	ld	r24, Z
     a88:	0e 94 6d 04 	call	0x8da	; 0x8da <LCD_SendChar>
		StringLength++;
     a8c:	1f 5f       	subi	r17, 0xFF	; 255
     a8e:	01 c0       	rjmp	.+2      	; 0xa92 <LCD_AmitSendString+0xcc>
     a90:	10 e0       	ldi	r17, 0x00	; 0
	if(String[j]!=' ') flag++;
	else{break;}
}
if((StringLength+flag-1)<=32){
	StringLength=0;
	while (String[StringLength]!='\0')
     a92:	6e 01       	movw	r12, r28
     a94:	c1 0e       	add	r12, r17
     a96:	d1 1c       	adc	r13, r1
     a98:	f6 01       	movw	r30, r12
     a9a:	80 81       	ld	r24, Z
     a9c:	81 11       	cpse	r24, r1
     a9e:	e9 cf       	rjmp	.-46     	; 0xa72 <LCD_AmitSendString+0xac>
     aa0:	04 c0       	rjmp	.+8      	; 0xaaa <LCD_AmitSendString+0xe4>
	}
		LCD_SendChar(String[StringLength]);
		StringLength++;
	}
}
else LCD_AmitSendString((u8*)"No Space To Print your txt");	
     aa2:	84 ed       	ldi	r24, 0xD4	; 212
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <LCD_AmitSendString>
}
}
     aaa:	df 91       	pop	r29
     aac:	cf 91       	pop	r28
     aae:	1f 91       	pop	r17
     ab0:	ff 90       	pop	r15
     ab2:	ef 90       	pop	r14
     ab4:	df 90       	pop	r13
     ab6:	cf 90       	pop	r12
     ab8:	08 95       	ret

00000aba <LCD_writeNumber>:
		}
	}
}

void LCD_writeNumber(u32 number)
{
     aba:	cf 92       	push	r12
     abc:	df 92       	push	r13
     abe:	ef 92       	push	r14
     ac0:	ff 92       	push	r15
     ac2:	0f 93       	push	r16
     ac4:	1f 93       	push	r17
     ac6:	8b 01       	movw	r16, r22
     ac8:	9c 01       	movw	r18, r24
	u32 Local_reversed = 1;
	if (number == 0)
     aca:	67 2b       	or	r22, r23
     acc:	68 2b       	or	r22, r24
     ace:	69 2b       	or	r22, r25
     ad0:	49 f5       	brne	.+82     	; 0xb24 <LCD_writeNumber+0x6a>
	{
		LCD_SendChar('0');
     ad2:	80 e3       	ldi	r24, 0x30	; 48
     ad4:	0e 94 6d 04 	call	0x8da	; 0x8da <LCD_SendChar>
     ad8:	45 c0       	rjmp	.+138    	; 0xb64 <LCD_writeNumber+0xaa>
	else
	{
		// Reverse Number
		while (number != 0)
		{
			Local_reversed = Local_reversed*10 + (number%10);
     ada:	dc 01       	movw	r26, r24
     adc:	cb 01       	movw	r24, r22
     ade:	88 0f       	add	r24, r24
     ae0:	99 1f       	adc	r25, r25
     ae2:	aa 1f       	adc	r26, r26
     ae4:	bb 1f       	adc	r27, r27
     ae6:	6c 01       	movw	r12, r24
     ae8:	7d 01       	movw	r14, r26
     aea:	cc 0c       	add	r12, r12
     aec:	dd 1c       	adc	r13, r13
     aee:	ee 1c       	adc	r14, r14
     af0:	ff 1c       	adc	r15, r15
     af2:	cc 0c       	add	r12, r12
     af4:	dd 1c       	adc	r13, r13
     af6:	ee 1c       	adc	r14, r14
     af8:	ff 1c       	adc	r15, r15
     afa:	c8 0e       	add	r12, r24
     afc:	d9 1e       	adc	r13, r25
     afe:	ea 1e       	adc	r14, r26
     b00:	fb 1e       	adc	r15, r27
     b02:	c9 01       	movw	r24, r18
     b04:	b8 01       	movw	r22, r16
     b06:	2a e0       	ldi	r18, 0x0A	; 10
     b08:	30 e0       	ldi	r19, 0x00	; 0
     b0a:	40 e0       	ldi	r20, 0x00	; 0
     b0c:	50 e0       	ldi	r21, 0x00	; 0
     b0e:	0e 94 31 0a 	call	0x1462	; 0x1462 <__udivmodsi4>
     b12:	6c 0d       	add	r22, r12
     b14:	7d 1d       	adc	r23, r13
     b16:	8e 1d       	adc	r24, r14
     b18:	9f 1d       	adc	r25, r15
			number /= 10;
     b1a:	02 2f       	mov	r16, r18
     b1c:	13 2f       	mov	r17, r19
     b1e:	24 2f       	mov	r18, r20
     b20:	35 2f       	mov	r19, r21
     b22:	04 c0       	rjmp	.+8      	; 0xb2c <LCD_writeNumber+0x72>
     b24:	61 e0       	ldi	r22, 0x01	; 1
     b26:	70 e0       	ldi	r23, 0x00	; 0
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	90 e0       	ldi	r25, 0x00	; 0
		LCD_SendChar('0');
	}
	else
	{
		// Reverse Number
		while (number != 0)
     b2c:	01 15       	cp	r16, r1
     b2e:	11 05       	cpc	r17, r1
     b30:	21 05       	cpc	r18, r1
     b32:	31 05       	cpc	r19, r1
     b34:	91 f6       	brne	.-92     	; 0xada <LCD_writeNumber+0x20>
			number /= 10;
		}
		
		do
		{
			LCD_SendChar((Local_reversed%10)+'0');
     b36:	2a e0       	ldi	r18, 0x0A	; 10
     b38:	30 e0       	ldi	r19, 0x00	; 0
     b3a:	40 e0       	ldi	r20, 0x00	; 0
     b3c:	50 e0       	ldi	r21, 0x00	; 0
     b3e:	0e 94 31 0a 	call	0x1462	; 0x1462 <__udivmodsi4>
     b42:	e2 2e       	mov	r14, r18
     b44:	f3 2e       	mov	r15, r19
     b46:	04 2f       	mov	r16, r20
     b48:	15 2f       	mov	r17, r21
     b4a:	80 e3       	ldi	r24, 0x30	; 48
     b4c:	86 0f       	add	r24, r22
     b4e:	0e 94 6d 04 	call	0x8da	; 0x8da <LCD_SendChar>
			Local_reversed /= 10;
     b52:	6e 2d       	mov	r22, r14
     b54:	7f 2d       	mov	r23, r15
     b56:	80 2f       	mov	r24, r16
     b58:	91 2f       	mov	r25, r17
		}while (Local_reversed != 1);
     b5a:	61 30       	cpi	r22, 0x01	; 1
     b5c:	71 05       	cpc	r23, r1
     b5e:	81 05       	cpc	r24, r1
     b60:	91 05       	cpc	r25, r1
     b62:	49 f7       	brne	.-46     	; 0xb36 <LCD_writeNumber+0x7c>
	}
}
     b64:	1f 91       	pop	r17
     b66:	0f 91       	pop	r16
     b68:	ff 90       	pop	r15
     b6a:	ef 90       	pop	r14
     b6c:	df 90       	pop	r13
     b6e:	cf 90       	pop	r12
     b70:	08 95       	ret

00000b72 <STOP_Function>:
	}
		goto Move;

}
void STOP_Function(void){//force stop
	AUTONC_setCarState(AUTONC_STOP);
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	0e 94 ce 00 	call	0x19c	; 0x19c <AUTONC_setCarState>
	Servo_RotateDegree(0);
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	0e 94 01 07 	call	0xe02	; 0xe02 <Servo_RotateDegree>
	LCD_clear();
     b7e:	0e 94 c7 04 	call	0x98e	; 0x98e <LCD_clear>
	LCD_goToSpecificPosition(LCD_LINE_ONE,3);
     b82:	63 e0       	ldi	r22, 0x03	; 3
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <LCD_goToSpecificPosition>
	LCD_AmitSendString((u8*)"Thank you");
     b8a:	8f ee       	ldi	r24, 0xEF	; 239
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <LCD_AmitSendString>
     b92:	ff cf       	rjmp	.-2      	; 0xb92 <STOP_Function+0x20>

00000b94 <main>:
#include "AUTONC_Interface.h"

void STOP_Function(void);

int main(void)
{
     b94:	cf 93       	push	r28
     b96:	df 93       	push	r29
     b98:	cd b7       	in	r28, 0x3d	; 61
     b9a:	de b7       	in	r29, 0x3e	; 62
     b9c:	2c 97       	sbiw	r28, 0x0c	; 12
     b9e:	0f b6       	in	r0, 0x3f	; 63
     ba0:	f8 94       	cli
     ba2:	de bf       	out	0x3e, r29	; 62
     ba4:	0f be       	out	0x3f, r0	; 63
     ba6:	cd bf       	out	0x3d, r28	; 61
	u32 distance,distanceRight,distanceLeft; // to get USS distances
	AUTONC_init(); // Directions and initialization modules
     ba8:	0e 94 b1 00 	call	0x162	; 0x162 <AUTONC_init>
	GI_Enable();
     bac:	0e 94 b6 03 	call	0x76c	; 0x76c <GI_Enable>
	EXTI_INT0SetCallBack(&STOP_Function);// external interrupt to stop the program
     bb0:	89 eb       	ldi	r24, 0xB9	; 185
     bb2:	95 e0       	ldi	r25, 0x05	; 5
     bb4:	0e 94 34 03 	call	0x668	; 0x668 <EXTI_INT0SetCallBack>
	EXTI_Enable(EXTI_INT0,EXTI_FALLING_EDGE);// direct when pressing button 2 
     bb8:	61 e0       	ldi	r22, 0x01	; 1
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <EXTI_Enable>
	AUTONC_DisplayProjectDetails();
     bc0:	0e 94 49 00 	call	0x92	; 0x92 <AUTONC_DisplayProjectDetails>
//Start
Move:
	USS_GetDistance(&distance);
     bc4:	ce 01       	movw	r24, r28
     bc6:	01 96       	adiw	r24, 0x01	; 1
     bc8:	0e 94 9b 08 	call	0x1136	; 0x1136 <USS_GetDistance>
	while( (distance>=30) && (distance<=1000) ){
     bcc:	cb c0       	rjmp	.+406    	; 0xd64 <main+0x1d0>
		AUTONC_setCarState(AUTONC_FORWARD);
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	0e 94 ce 00 	call	0x19c	; 0x19c <AUTONC_setCarState>
		//servo on right
		Servo_RotateDegree(30);//servo rotate right
     bd4:	8e e1       	ldi	r24, 0x1E	; 30
     bd6:	0e 94 01 07 	call	0xe02	; 0xe02 <Servo_RotateDegree>
        AUTONC_ControlSpeed();
     bda:	0e 94 06 01 	call	0x20c	; 0x20c <AUTONC_ControlSpeed>
		USS_GetDistance(&distanceRight);
     bde:	ce 01       	movw	r24, r28
     be0:	05 96       	adiw	r24, 0x05	; 5
     be2:	0e 94 9b 08 	call	0x1136	; 0x1136 <USS_GetDistance>
     be6:	8f e3       	ldi	r24, 0x3F	; 63
     be8:	9c e9       	ldi	r25, 0x9C	; 156
     bea:	01 97       	sbiw	r24, 0x01	; 1
     bec:	f1 f7       	brne	.-4      	; 0xbea <main+0x56>
     bee:	00 c0       	rjmp	.+0      	; 0xbf0 <main+0x5c>
     bf0:	00 00       	nop
		_delay_ms(10);
		LCD_clear();
     bf2:	0e 94 c7 04 	call	0x98e	; 0x98e <LCD_clear>
		LCD_AmitSendString((u8*)"FWD Nearest obj. after:");
     bf6:	89 ef       	ldi	r24, 0xF9	; 249
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <LCD_AmitSendString>
		LCD_writeNumber(distanceRight);
     bfe:	6d 81       	ldd	r22, Y+5	; 0x05
     c00:	7e 81       	ldd	r23, Y+6	; 0x06
     c02:	8f 81       	ldd	r24, Y+7	; 0x07
     c04:	98 85       	ldd	r25, Y+8	; 0x08
     c06:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_writeNumber>
		LCD_AmitSendString((u8*)" cm");
     c0a:	81 e1       	ldi	r24, 0x11	; 17
     c0c:	91 e0       	ldi	r25, 0x01	; 1
     c0e:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <LCD_AmitSendString>
		//servo on center
		AUTONC_setCarState(AUTONC_FORWARD);
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	0e 94 ce 00 	call	0x19c	; 0x19c <AUTONC_setCarState>
		Servo_RotateDegree(0);//servo rotate to center
     c18:	80 e0       	ldi	r24, 0x00	; 0
     c1a:	0e 94 01 07 	call	0xe02	; 0xe02 <Servo_RotateDegree>
		AUTONC_ControlSpeed();
     c1e:	0e 94 06 01 	call	0x20c	; 0x20c <AUTONC_ControlSpeed>
		USS_GetDistance(&distance);
     c22:	ce 01       	movw	r24, r28
     c24:	01 96       	adiw	r24, 0x01	; 1
     c26:	0e 94 9b 08 	call	0x1136	; 0x1136 <USS_GetDistance>
     c2a:	8f e3       	ldi	r24, 0x3F	; 63
     c2c:	9c e9       	ldi	r25, 0x9C	; 156
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	f1 f7       	brne	.-4      	; 0xc2e <main+0x9a>
     c32:	00 c0       	rjmp	.+0      	; 0xc34 <main+0xa0>
     c34:	00 00       	nop
		_delay_ms(10);
		LCD_clear();
     c36:	0e 94 c7 04 	call	0x98e	; 0x98e <LCD_clear>
		LCD_AmitSendString((u8*)"FWD Nearest obj. after:");
     c3a:	89 ef       	ldi	r24, 0xF9	; 249
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <LCD_AmitSendString>
		LCD_writeNumber(distance);
     c42:	69 81       	ldd	r22, Y+1	; 0x01
     c44:	7a 81       	ldd	r23, Y+2	; 0x02
     c46:	8b 81       	ldd	r24, Y+3	; 0x03
     c48:	9c 81       	ldd	r25, Y+4	; 0x04
     c4a:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_writeNumber>
		LCD_AmitSendString((u8*)" cm");
     c4e:	81 e1       	ldi	r24, 0x11	; 17
     c50:	91 e0       	ldi	r25, 0x01	; 1
     c52:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <LCD_AmitSendString>
		//servo on Left
		AUTONC_setCarState(AUTONC_FORWARD);
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	0e 94 ce 00 	call	0x19c	; 0x19c <AUTONC_setCarState>
		Servo_RotateDegree(-30);//servo rotate Left
     c5c:	82 ee       	ldi	r24, 0xE2	; 226
     c5e:	0e 94 01 07 	call	0xe02	; 0xe02 <Servo_RotateDegree>
		AUTONC_ControlSpeed();
     c62:	0e 94 06 01 	call	0x20c	; 0x20c <AUTONC_ControlSpeed>
		USS_GetDistance(&distanceLeft);
     c66:	ce 01       	movw	r24, r28
     c68:	09 96       	adiw	r24, 0x09	; 9
     c6a:	0e 94 9b 08 	call	0x1136	; 0x1136 <USS_GetDistance>
     c6e:	8f e3       	ldi	r24, 0x3F	; 63
     c70:	9c e9       	ldi	r25, 0x9C	; 156
     c72:	01 97       	sbiw	r24, 0x01	; 1
     c74:	f1 f7       	brne	.-4      	; 0xc72 <main+0xde>
     c76:	00 c0       	rjmp	.+0      	; 0xc78 <main+0xe4>
     c78:	00 00       	nop
		_delay_ms(10);
		LCD_clear();
     c7a:	0e 94 c7 04 	call	0x98e	; 0x98e <LCD_clear>
		LCD_AmitSendString((u8*)"FWD Nearest obj. after:");
     c7e:	89 ef       	ldi	r24, 0xF9	; 249
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <LCD_AmitSendString>
		LCD_writeNumber(distanceLeft);
     c86:	69 85       	ldd	r22, Y+9	; 0x09
     c88:	7a 85       	ldd	r23, Y+10	; 0x0a
     c8a:	8b 85       	ldd	r24, Y+11	; 0x0b
     c8c:	9c 85       	ldd	r25, Y+12	; 0x0c
     c8e:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_writeNumber>
		LCD_AmitSendString((u8*)" cm");
     c92:	81 e1       	ldi	r24, 0x11	; 17
     c94:	91 e0       	ldi	r25, 0x01	; 1
     c96:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <LCD_AmitSendString>
		
		Servo_RotateDegree(0);// servo back to center
     c9a:	80 e0       	ldi	r24, 0x00	; 0
     c9c:	0e 94 01 07 	call	0xe02	; 0xe02 <Servo_RotateDegree>
		if((distanceRight>=distanceLeft) && (distanceRight>=distance) && (distance<40) ){
     ca0:	8d 81       	ldd	r24, Y+5	; 0x05
     ca2:	9e 81       	ldd	r25, Y+6	; 0x06
     ca4:	af 81       	ldd	r26, Y+7	; 0x07
     ca6:	b8 85       	ldd	r27, Y+8	; 0x08
     ca8:	49 85       	ldd	r20, Y+9	; 0x09
     caa:	5a 85       	ldd	r21, Y+10	; 0x0a
     cac:	6b 85       	ldd	r22, Y+11	; 0x0b
     cae:	7c 85       	ldd	r23, Y+12	; 0x0c
     cb0:	84 17       	cp	r24, r20
     cb2:	95 07       	cpc	r25, r21
     cb4:	a6 07       	cpc	r26, r22
     cb6:	b7 07       	cpc	r27, r23
     cb8:	08 f1       	brcs	.+66     	; 0xcfc <main+0x168>
     cba:	09 81       	ldd	r16, Y+1	; 0x01
     cbc:	1a 81       	ldd	r17, Y+2	; 0x02
     cbe:	2b 81       	ldd	r18, Y+3	; 0x03
     cc0:	3c 81       	ldd	r19, Y+4	; 0x04
     cc2:	80 17       	cp	r24, r16
     cc4:	91 07       	cpc	r25, r17
     cc6:	a2 07       	cpc	r26, r18
     cc8:	b3 07       	cpc	r27, r19
     cca:	c0 f0       	brcs	.+48     	; 0xcfc <main+0x168>
     ccc:	08 32       	cpi	r16, 0x28	; 40
     cce:	11 05       	cpc	r17, r1
     cd0:	21 05       	cpc	r18, r1
     cd2:	31 05       	cpc	r19, r1
     cd4:	98 f4       	brcc	.+38     	; 0xcfc <main+0x168>
			AUTONC_setCarState(AUTONC_ROTATE_RIGHT);
     cd6:	83 e0       	ldi	r24, 0x03	; 3
     cd8:	0e 94 ce 00 	call	0x19c	; 0x19c <AUTONC_setCarState>
			LCD_clear();
     cdc:	0e 94 c7 04 	call	0x98e	; 0x98e <LCD_clear>
			LCD_AmitSendString((u8*)"Rotate Right -->");
     ce0:	85 e1       	ldi	r24, 0x15	; 21
     ce2:	91 e0       	ldi	r25, 0x01	; 1
     ce4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <LCD_AmitSendString>
     ce8:	9f ef       	ldi	r25, 0xFF	; 255
     cea:	23 ef       	ldi	r18, 0xF3	; 243
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	91 50       	subi	r25, 0x01	; 1
     cf0:	20 40       	sbci	r18, 0x00	; 0
     cf2:	80 40       	sbci	r24, 0x00	; 0
     cf4:	e1 f7       	brne	.-8      	; 0xcee <main+0x15a>
     cf6:	00 c0       	rjmp	.+0      	; 0xcf8 <main+0x164>
     cf8:	00 00       	nop
     cfa:	24 c0       	rjmp	.+72     	; 0xd44 <main+0x1b0>
			_delay_ms(40);
		}
		else if((distanceLeft>=distanceRight) && (distanceLeft>=distance) && (distance<40) ){
     cfc:	48 17       	cp	r20, r24
     cfe:	59 07       	cpc	r21, r25
     d00:	6a 07       	cpc	r22, r26
     d02:	7b 07       	cpc	r23, r27
     d04:	f8 f0       	brcs	.+62     	; 0xd44 <main+0x1b0>
     d06:	89 81       	ldd	r24, Y+1	; 0x01
     d08:	9a 81       	ldd	r25, Y+2	; 0x02
     d0a:	ab 81       	ldd	r26, Y+3	; 0x03
     d0c:	bc 81       	ldd	r27, Y+4	; 0x04
     d0e:	48 17       	cp	r20, r24
     d10:	59 07       	cpc	r21, r25
     d12:	6a 07       	cpc	r22, r26
     d14:	7b 07       	cpc	r23, r27
     d16:	b0 f0       	brcs	.+44     	; 0xd44 <main+0x1b0>
     d18:	88 97       	sbiw	r24, 0x28	; 40
     d1a:	a1 05       	cpc	r26, r1
     d1c:	b1 05       	cpc	r27, r1
     d1e:	90 f4       	brcc	.+36     	; 0xd44 <main+0x1b0>
			AUTONC_setCarState(AUTONC_ROTATE_LEFT);
     d20:	84 e0       	ldi	r24, 0x04	; 4
     d22:	0e 94 ce 00 	call	0x19c	; 0x19c <AUTONC_setCarState>
			LCD_clear();
     d26:	0e 94 c7 04 	call	0x98e	; 0x98e <LCD_clear>
			LCD_AmitSendString((u8*)"Rotate Left <--");
     d2a:	86 e2       	ldi	r24, 0x26	; 38
     d2c:	91 e0       	ldi	r25, 0x01	; 1
     d2e:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <LCD_AmitSendString>
     d32:	9f ef       	ldi	r25, 0xFF	; 255
     d34:	23 ef       	ldi	r18, 0xF3	; 243
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	91 50       	subi	r25, 0x01	; 1
     d3a:	20 40       	sbci	r18, 0x00	; 0
     d3c:	80 40       	sbci	r24, 0x00	; 0
     d3e:	e1 f7       	brne	.-8      	; 0xd38 <main+0x1a4>
     d40:	00 c0       	rjmp	.+0      	; 0xd42 <main+0x1ae>
     d42:	00 00       	nop
		else{
			
			//continue
		}

		AUTONC_setCarState(AUTONC_STOP);// to control speed
     d44:	80 e0       	ldi	r24, 0x00	; 0
     d46:	0e 94 ce 00 	call	0x19c	; 0x19c <AUTONC_setCarState>
     d4a:	9f ef       	ldi	r25, 0xFF	; 255
     d4c:	22 e5       	ldi	r18, 0x52	; 82
     d4e:	87 e0       	ldi	r24, 0x07	; 7
     d50:	91 50       	subi	r25, 0x01	; 1
     d52:	20 40       	sbci	r18, 0x00	; 0
     d54:	80 40       	sbci	r24, 0x00	; 0
     d56:	e1 f7       	brne	.-8      	; 0xd50 <main+0x1bc>
     d58:	00 c0       	rjmp	.+0      	; 0xd5a <main+0x1c6>
     d5a:	00 00       	nop
		_delay_ms(150);// for LCD and repeatability and servo
		USS_GetDistance(&distance);	
     d5c:	ce 01       	movw	r24, r28
     d5e:	01 96       	adiw	r24, 0x01	; 1
     d60:	0e 94 9b 08 	call	0x1136	; 0x1136 <USS_GetDistance>
	EXTI_Enable(EXTI_INT0,EXTI_FALLING_EDGE);// direct when pressing button 2 
	AUTONC_DisplayProjectDetails();
//Start
Move:
	USS_GetDistance(&distance);
	while( (distance>=30) && (distance<=1000) ){
     d64:	89 81       	ldd	r24, Y+1	; 0x01
     d66:	9a 81       	ldd	r25, Y+2	; 0x02
     d68:	ab 81       	ldd	r26, Y+3	; 0x03
     d6a:	bc 81       	ldd	r27, Y+4	; 0x04
     d6c:	4e 97       	sbiw	r24, 0x1e	; 30
     d6e:	a1 09       	sbc	r26, r1
     d70:	b1 09       	sbc	r27, r1
     d72:	8b 3c       	cpi	r24, 0xCB	; 203
     d74:	93 40       	sbci	r25, 0x03	; 3
     d76:	a1 05       	cpc	r26, r1
     d78:	b1 05       	cpc	r27, r1
     d7a:	08 f4       	brcc	.+2      	; 0xd7e <main+0x1ea>
     d7c:	28 cf       	rjmp	.-432    	; 0xbce <main+0x3a>
		AUTONC_setCarState(AUTONC_STOP);// to control speed
		_delay_ms(150);// for LCD and repeatability and servo
		USS_GetDistance(&distance);	
	}
	
		USS_GetDistance(&distance);
     d7e:	ce 01       	movw	r24, r28
     d80:	01 96       	adiw	r24, 0x01	; 1
     d82:	0e 94 9b 08 	call	0x1136	; 0x1136 <USS_GetDistance>
		
	while( (distance<30) || (distance>1000) ){
     d86:	30 c0       	rjmp	.+96     	; 0xde8 <main+0x254>
		
			AUTONC_setCarState(AUTONC_BACKWARD);
     d88:	82 e0       	ldi	r24, 0x02	; 2
     d8a:	0e 94 ce 00 	call	0x19c	; 0x19c <AUTONC_setCarState>
			LCD_clear();
     d8e:	0e 94 c7 04 	call	0x98e	; 0x98e <LCD_clear>
			USS_GetDistance(&distance);
     d92:	ce 01       	movw	r24, r28
     d94:	01 96       	adiw	r24, 0x01	; 1
     d96:	0e 94 9b 08 	call	0x1136	; 0x1136 <USS_GetDistance>
			LCD_AmitSendString((u8*)"BWD Nearest obj. after:");
     d9a:	86 e3       	ldi	r24, 0x36	; 54
     d9c:	91 e0       	ldi	r25, 0x01	; 1
     d9e:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <LCD_AmitSendString>
			LCD_writeNumber(distance);
     da2:	69 81       	ldd	r22, Y+1	; 0x01
     da4:	7a 81       	ldd	r23, Y+2	; 0x02
     da6:	8b 81       	ldd	r24, Y+3	; 0x03
     da8:	9c 81       	ldd	r25, Y+4	; 0x04
     daa:	0e 94 5d 05 	call	0xaba	; 0xaba <LCD_writeNumber>
			LCD_AmitSendString((u8*)" cm");
     dae:	81 e1       	ldi	r24, 0x11	; 17
     db0:	91 e0       	ldi	r25, 0x01	; 1
     db2:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <LCD_AmitSendString>
     db6:	8f ef       	ldi	r24, 0xFF	; 255
     db8:	93 ec       	ldi	r25, 0xC3	; 195
     dba:	29 e0       	ldi	r18, 0x09	; 9
     dbc:	81 50       	subi	r24, 0x01	; 1
     dbe:	90 40       	sbci	r25, 0x00	; 0
     dc0:	20 40       	sbci	r18, 0x00	; 0
     dc2:	e1 f7       	brne	.-8      	; 0xdbc <main+0x228>
     dc4:	00 c0       	rjmp	.+0      	; 0xdc6 <main+0x232>
     dc6:	00 00       	nop
			_delay_ms(200);
			AUTONC_setCarState(AUTONC_STOP);
     dc8:	80 e0       	ldi	r24, 0x00	; 0
     dca:	0e 94 ce 00 	call	0x19c	; 0x19c <AUTONC_setCarState>
			USS_GetDistance(&distance);
     dce:	ce 01       	movw	r24, r28
     dd0:	01 96       	adiw	r24, 0x01	; 1
     dd2:	0e 94 9b 08 	call	0x1136	; 0x1136 <USS_GetDistance>
     dd6:	8f ef       	ldi	r24, 0xFF	; 255
     dd8:	99 e6       	ldi	r25, 0x69	; 105
     dda:	28 e1       	ldi	r18, 0x18	; 24
     ddc:	81 50       	subi	r24, 0x01	; 1
     dde:	90 40       	sbci	r25, 0x00	; 0
     de0:	20 40       	sbci	r18, 0x00	; 0
     de2:	e1 f7       	brne	.-8      	; 0xddc <main+0x248>
     de4:	00 c0       	rjmp	.+0      	; 0xde6 <main+0x252>
     de6:	00 00       	nop
		USS_GetDistance(&distance);	
	}
	
		USS_GetDistance(&distance);
		
	while( (distance<30) || (distance>1000) ){
     de8:	89 81       	ldd	r24, Y+1	; 0x01
     dea:	9a 81       	ldd	r25, Y+2	; 0x02
     dec:	ab 81       	ldd	r26, Y+3	; 0x03
     dee:	bc 81       	ldd	r27, Y+4	; 0x04
     df0:	4e 97       	sbiw	r24, 0x1e	; 30
     df2:	a1 09       	sbc	r26, r1
     df4:	b1 09       	sbc	r27, r1
     df6:	8b 3c       	cpi	r24, 0xCB	; 203
     df8:	93 40       	sbci	r25, 0x03	; 3
     dfa:	a1 05       	cpc	r26, r1
     dfc:	b1 05       	cpc	r27, r1
     dfe:	20 f6       	brcc	.-120    	; 0xd88 <main+0x1f4>
     e00:	e1 ce       	rjmp	.-574    	; 0xbc4 <main+0x30>

00000e02 <Servo_RotateDegree>:

void Servo_OFF (void){
	TMR_timer2stop();
}

void Servo_RotateDegree(s8 Angle){
     e02:	cf 93       	push	r28
     e04:	c8 2f       	mov	r28, r24
	
			TMR_timer2init();
     e06:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <TMR_timer2init>
			TMR_timer2SetCompareMatchValue(2*Angle+190);//range  -30 to 30   -30 = (130)   30 = (250)
     e0a:	8c 2f       	mov	r24, r28
     e0c:	cc 0f       	add	r28, r28
     e0e:	99 0b       	sbc	r25, r25
     e10:	81 5a       	subi	r24, 0xA1	; 161
     e12:	9f 4f       	sbci	r25, 0xFF	; 255
     e14:	88 0f       	add	r24, r24
     e16:	0e 94 82 08 	call	0x1104	; 0x1104 <TMR_timer2SetCompareMatchValue>
			TMR_timer2start();
     e1a:	0e 94 78 08 	call	0x10f0	; 0x10f0 <TMR_timer2start>
     e1e:	cf 91       	pop	r28
     e20:	08 95       	ret

00000e22 <__vector_11>:
void TMR_timer2stop(void)
{
	//No clock source (Timer/Counter stopped).
	CLR_BIT(TCCR2,0);
	CLR_BIT(TCCR2,1);
	CLR_BIT(TCCR2,2);
     e22:	1f 92       	push	r1
     e24:	0f 92       	push	r0
     e26:	0f b6       	in	r0, 0x3f	; 63
     e28:	0f 92       	push	r0
     e2a:	11 24       	eor	r1, r1
     e2c:	2f 93       	push	r18
     e2e:	3f 93       	push	r19
     e30:	4f 93       	push	r20
     e32:	5f 93       	push	r21
     e34:	6f 93       	push	r22
     e36:	7f 93       	push	r23
     e38:	8f 93       	push	r24
     e3a:	9f 93       	push	r25
     e3c:	af 93       	push	r26
     e3e:	bf 93       	push	r27
     e40:	ef 93       	push	r30
     e42:	ff 93       	push	r31
     e44:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <counterOVF.1658>
     e48:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <counterOVF.1658+0x1>
     e4c:	01 96       	adiw	r24, 0x01	; 1
     e4e:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <counterOVF.1658+0x1>
     e52:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <counterOVF.1658>
     e56:	81 3d       	cpi	r24, 0xD1	; 209
     e58:	93 40       	sbci	r25, 0x03	; 3
     e5a:	69 f4       	brne	.+26     	; 0xe76 <__vector_11+0x54>
     e5c:	80 e7       	ldi	r24, 0x70	; 112
     e5e:	82 bf       	out	0x32, r24	; 50
     e60:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <counterOVF.1658+0x1>
     e64:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <counterOVF.1658>
     e68:	e0 91 6a 01 	lds	r30, 0x016A	; 0x80016a <TMR_timer0_OVF_pCallBack>
     e6c:	f0 91 6b 01 	lds	r31, 0x016B	; 0x80016b <TMR_timer0_OVF_pCallBack+0x1>
     e70:	30 97       	sbiw	r30, 0x00	; 0
     e72:	09 f0       	breq	.+2      	; 0xe76 <__vector_11+0x54>
     e74:	09 95       	icall
     e76:	ff 91       	pop	r31
     e78:	ef 91       	pop	r30
     e7a:	bf 91       	pop	r27
     e7c:	af 91       	pop	r26
     e7e:	9f 91       	pop	r25
     e80:	8f 91       	pop	r24
     e82:	7f 91       	pop	r23
     e84:	6f 91       	pop	r22
     e86:	5f 91       	pop	r21
     e88:	4f 91       	pop	r20
     e8a:	3f 91       	pop	r19
     e8c:	2f 91       	pop	r18
     e8e:	0f 90       	pop	r0
     e90:	0f be       	out	0x3f, r0	; 63
     e92:	0f 90       	pop	r0
     e94:	1f 90       	pop	r1
     e96:	18 95       	reti

00000e98 <__vector_10>:
     e98:	1f 92       	push	r1
     e9a:	0f 92       	push	r0
     e9c:	0f b6       	in	r0, 0x3f	; 63
     e9e:	0f 92       	push	r0
     ea0:	11 24       	eor	r1, r1
     ea2:	2f 93       	push	r18
     ea4:	3f 93       	push	r19
     ea6:	4f 93       	push	r20
     ea8:	5f 93       	push	r21
     eaa:	6f 93       	push	r22
     eac:	7f 93       	push	r23
     eae:	8f 93       	push	r24
     eb0:	9f 93       	push	r25
     eb2:	af 93       	push	r26
     eb4:	bf 93       	push	r27
     eb6:	ef 93       	push	r30
     eb8:	ff 93       	push	r31
     eba:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <counterCTC.1664>
     ebe:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <counterCTC.1664+0x1>
     ec2:	01 96       	adiw	r24, 0x01	; 1
     ec4:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <counterCTC.1664+0x1>
     ec8:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <counterCTC.1664>
     ecc:	88 3e       	cpi	r24, 0xE8	; 232
     ece:	93 40       	sbci	r25, 0x03	; 3
     ed0:	59 f4       	brne	.+22     	; 0xee8 <__vector_10+0x50>
     ed2:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <counterCTC.1664+0x1>
     ed6:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <counterCTC.1664>
     eda:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <TMR_timer0_CTC_pCallBack>
     ede:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <TMR_timer0_CTC_pCallBack+0x1>
     ee2:	30 97       	sbiw	r30, 0x00	; 0
     ee4:	09 f0       	breq	.+2      	; 0xee8 <__vector_10+0x50>
     ee6:	09 95       	icall
     ee8:	ff 91       	pop	r31
     eea:	ef 91       	pop	r30
     eec:	bf 91       	pop	r27
     eee:	af 91       	pop	r26
     ef0:	9f 91       	pop	r25
     ef2:	8f 91       	pop	r24
     ef4:	7f 91       	pop	r23
     ef6:	6f 91       	pop	r22
     ef8:	5f 91       	pop	r21
     efa:	4f 91       	pop	r20
     efc:	3f 91       	pop	r19
     efe:	2f 91       	pop	r18
     f00:	0f 90       	pop	r0
     f02:	0f be       	out	0x3f, r0	; 63
     f04:	0f 90       	pop	r0
     f06:	1f 90       	pop	r1
     f08:	18 95       	reti

00000f0a <TMR_timer1init>:
     f0a:	8f b5       	in	r24, 0x2f	; 47
     f0c:	8e 7f       	andi	r24, 0xFE	; 254
     f0e:	8f bd       	out	0x2f, r24	; 47
     f10:	8f b5       	in	r24, 0x2f	; 47
     f12:	8d 7f       	andi	r24, 0xFD	; 253
     f14:	8f bd       	out	0x2f, r24	; 47
     f16:	8e b5       	in	r24, 0x2e	; 46
     f18:	87 7f       	andi	r24, 0xF7	; 247
     f1a:	8e bd       	out	0x2e, r24	; 46
     f1c:	8e b5       	in	r24, 0x2e	; 46
     f1e:	8f 7e       	andi	r24, 0xEF	; 239
     f20:	8e bd       	out	0x2e, r24	; 46
     f22:	1d bc       	out	0x2d, r1	; 45
     f24:	1c bc       	out	0x2c, r1	; 44
     f26:	89 b7       	in	r24, 0x39	; 57
     f28:	84 60       	ori	r24, 0x04	; 4
     f2a:	89 bf       	out	0x39, r24	; 57
     f2c:	08 95       	ret

00000f2e <TMR_timer1start>:
     f2e:	8e b5       	in	r24, 0x2e	; 46
     f30:	81 60       	ori	r24, 0x01	; 1
     f32:	8e bd       	out	0x2e, r24	; 46
     f34:	8e b5       	in	r24, 0x2e	; 46
     f36:	82 60       	ori	r24, 0x02	; 2
     f38:	8e bd       	out	0x2e, r24	; 46
     f3a:	8e b5       	in	r24, 0x2e	; 46
     f3c:	8b 7f       	andi	r24, 0xFB	; 251
     f3e:	8e bd       	out	0x2e, r24	; 46
     f40:	08 95       	ret

00000f42 <TMR_timer1stop>:
     f42:	8e b5       	in	r24, 0x2e	; 46
     f44:	8e 7f       	andi	r24, 0xFE	; 254
     f46:	8e bd       	out	0x2e, r24	; 46
     f48:	8e b5       	in	r24, 0x2e	; 46
     f4a:	8d 7f       	andi	r24, 0xFD	; 253
     f4c:	8e bd       	out	0x2e, r24	; 46
     f4e:	8e b5       	in	r24, 0x2e	; 46
     f50:	8b 7f       	andi	r24, 0xFB	; 251
     f52:	8e bd       	out	0x2e, r24	; 46
     f54:	08 95       	ret

00000f56 <__vector_9>:
     f56:	1f 92       	push	r1
     f58:	0f 92       	push	r0
     f5a:	0f b6       	in	r0, 0x3f	; 63
     f5c:	0f 92       	push	r0
     f5e:	11 24       	eor	r1, r1
     f60:	2f 93       	push	r18
     f62:	3f 93       	push	r19
     f64:	4f 93       	push	r20
     f66:	5f 93       	push	r21
     f68:	6f 93       	push	r22
     f6a:	7f 93       	push	r23
     f6c:	8f 93       	push	r24
     f6e:	9f 93       	push	r25
     f70:	af 93       	push	r26
     f72:	bf 93       	push	r27
     f74:	ef 93       	push	r30
     f76:	ff 93       	push	r31
     f78:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <counterOVF.1693>
     f7c:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <counterOVF.1693+0x1>
     f80:	01 96       	adiw	r24, 0x01	; 1
     f82:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <counterOVF.1693+0x1>
     f86:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <counterOVF.1693>
     f8a:	04 97       	sbiw	r24, 0x04	; 4
     f8c:	69 f4       	brne	.+26     	; 0xfa8 <__vector_9+0x52>
     f8e:	80 e7       	ldi	r24, 0x70	; 112
     f90:	82 bf       	out	0x32, r24	; 50
     f92:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <counterOVF.1693+0x1>
     f96:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <counterOVF.1693>
     f9a:	e0 91 66 01 	lds	r30, 0x0166	; 0x800166 <TMR_timer1_OVF_pCallBack>
     f9e:	f0 91 67 01 	lds	r31, 0x0167	; 0x800167 <TMR_timer1_OVF_pCallBack+0x1>
     fa2:	30 97       	sbiw	r30, 0x00	; 0
     fa4:	09 f0       	breq	.+2      	; 0xfa8 <__vector_9+0x52>
     fa6:	09 95       	icall
     fa8:	ff 91       	pop	r31
     faa:	ef 91       	pop	r30
     fac:	bf 91       	pop	r27
     fae:	af 91       	pop	r26
     fb0:	9f 91       	pop	r25
     fb2:	8f 91       	pop	r24
     fb4:	7f 91       	pop	r23
     fb6:	6f 91       	pop	r22
     fb8:	5f 91       	pop	r21
     fba:	4f 91       	pop	r20
     fbc:	3f 91       	pop	r19
     fbe:	2f 91       	pop	r18
     fc0:	0f 90       	pop	r0
     fc2:	0f be       	out	0x3f, r0	; 63
     fc4:	0f 90       	pop	r0
     fc6:	1f 90       	pop	r1
     fc8:	18 95       	reti

00000fca <__vector_7>:
     fca:	1f 92       	push	r1
     fcc:	0f 92       	push	r0
     fce:	0f b6       	in	r0, 0x3f	; 63
     fd0:	0f 92       	push	r0
     fd2:	11 24       	eor	r1, r1
     fd4:	2f 93       	push	r18
     fd6:	3f 93       	push	r19
     fd8:	4f 93       	push	r20
     fda:	5f 93       	push	r21
     fdc:	6f 93       	push	r22
     fde:	7f 93       	push	r23
     fe0:	8f 93       	push	r24
     fe2:	9f 93       	push	r25
     fe4:	af 93       	push	r26
     fe6:	bf 93       	push	r27
     fe8:	ef 93       	push	r30
     fea:	ff 93       	push	r31
     fec:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <counterCTC.1699>
     ff0:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <counterCTC.1699+0x1>
     ff4:	01 96       	adiw	r24, 0x01	; 1
     ff6:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <counterCTC.1699+0x1>
     ffa:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <counterCTC.1699>
     ffe:	0a 97       	sbiw	r24, 0x0a	; 10
    1000:	59 f4       	brne	.+22     	; 0x1018 <__vector_7+0x4e>
    1002:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <counterCTC.1699+0x1>
    1006:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <counterCTC.1699>
    100a:	e0 91 64 01 	lds	r30, 0x0164	; 0x800164 <TMR_timer1_CTC_pCallBack>
    100e:	f0 91 65 01 	lds	r31, 0x0165	; 0x800165 <TMR_timer1_CTC_pCallBack+0x1>
    1012:	30 97       	sbiw	r30, 0x00	; 0
    1014:	09 f0       	breq	.+2      	; 0x1018 <__vector_7+0x4e>
    1016:	09 95       	icall
    1018:	ff 91       	pop	r31
    101a:	ef 91       	pop	r30
    101c:	bf 91       	pop	r27
    101e:	af 91       	pop	r26
    1020:	9f 91       	pop	r25
    1022:	8f 91       	pop	r24
    1024:	7f 91       	pop	r23
    1026:	6f 91       	pop	r22
    1028:	5f 91       	pop	r21
    102a:	4f 91       	pop	r20
    102c:	3f 91       	pop	r19
    102e:	2f 91       	pop	r18
    1030:	0f 90       	pop	r0
    1032:	0f be       	out	0x3f, r0	; 63
    1034:	0f 90       	pop	r0
    1036:	1f 90       	pop	r1
    1038:	18 95       	reti

0000103a <__vector_6>:
    103a:	1f 92       	push	r1
    103c:	0f 92       	push	r0
    103e:	0f b6       	in	r0, 0x3f	; 63
    1040:	0f 92       	push	r0
    1042:	11 24       	eor	r1, r1
    1044:	2f 93       	push	r18
    1046:	3f 93       	push	r19
    1048:	8f 93       	push	r24
    104a:	9f 93       	push	r25
    104c:	86 b5       	in	r24, 0x26	; 38
    104e:	97 b5       	in	r25, 0x27	; 39
    1050:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <CounterValue.1716+0x1>
    1054:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <CounterValue.1716>
    1058:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    105c:	21 30       	cpi	r18, 0x01	; 1
    105e:	a1 f4       	brne	.+40     	; 0x1088 <__vector_6+0x4e>
    1060:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <oldValue.1715>
    1064:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <oldValue.1715+0x1>
    1068:	82 1b       	sub	r24, r18
    106a:	93 0b       	sbc	r25, r19
    106c:	88 0f       	add	r24, r24
    106e:	99 1f       	adc	r25, r25
    1070:	88 0f       	add	r24, r24
    1072:	99 1f       	adc	r25, r25
    1074:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <TMR_ICU_offPeriod+0x1>
    1078:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <TMR_ICU_offPeriod>
    107c:	8e b5       	in	r24, 0x2e	; 46
    107e:	8f 7b       	andi	r24, 0xBF	; 191
    1080:	8e bd       	out	0x2e, r24	; 46
    1082:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
    1086:	16 c0       	rjmp	.+44     	; 0x10b4 <__vector_6+0x7a>
    1088:	21 11       	cpse	r18, r1
    108a:	14 c0       	rjmp	.+40     	; 0x10b4 <__vector_6+0x7a>
    108c:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <oldValue.1715>
    1090:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <oldValue.1715+0x1>
    1094:	82 1b       	sub	r24, r18
    1096:	93 0b       	sbc	r25, r19
    1098:	88 0f       	add	r24, r24
    109a:	99 1f       	adc	r25, r25
    109c:	88 0f       	add	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <TMR_ICU_onPeriod+0x1>
    10a4:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <TMR_ICU_onPeriod>
    10a8:	8e b5       	in	r24, 0x2e	; 46
    10aa:	80 64       	ori	r24, 0x40	; 64
    10ac:	8e bd       	out	0x2e, r24	; 46
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    10b4:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <CounterValue.1716>
    10b8:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <CounterValue.1716+0x1>
    10bc:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <oldValue.1715+0x1>
    10c0:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <oldValue.1715>
    10c4:	9f 91       	pop	r25
    10c6:	8f 91       	pop	r24
    10c8:	3f 91       	pop	r19
    10ca:	2f 91       	pop	r18
    10cc:	0f 90       	pop	r0
    10ce:	0f be       	out	0x3f, r0	; 63
    10d0:	0f 90       	pop	r0
    10d2:	1f 90       	pop	r1
    10d4:	18 95       	reti

000010d6 <TMR_timer2init>:
    10d6:	85 b5       	in	r24, 0x25	; 37
    10d8:	88 60       	ori	r24, 0x08	; 8
    10da:	85 bd       	out	0x25, r24	; 37
    10dc:	85 b5       	in	r24, 0x25	; 37
    10de:	80 64       	ori	r24, 0x40	; 64
    10e0:	85 bd       	out	0x25, r24	; 37
    10e2:	85 b5       	in	r24, 0x25	; 37
    10e4:	8f 7e       	andi	r24, 0xEF	; 239
    10e6:	85 bd       	out	0x25, r24	; 37
    10e8:	85 b5       	in	r24, 0x25	; 37
    10ea:	80 62       	ori	r24, 0x20	; 32
    10ec:	85 bd       	out	0x25, r24	; 37
    10ee:	08 95       	ret

000010f0 <TMR_timer2start>:
    10f0:	85 b5       	in	r24, 0x25	; 37
    10f2:	8e 7f       	andi	r24, 0xFE	; 254
    10f4:	85 bd       	out	0x25, r24	; 37
    10f6:	85 b5       	in	r24, 0x25	; 37
    10f8:	8d 7f       	andi	r24, 0xFD	; 253
    10fa:	85 bd       	out	0x25, r24	; 37
    10fc:	85 b5       	in	r24, 0x25	; 37
    10fe:	84 60       	ori	r24, 0x04	; 4
    1100:	85 bd       	out	0x25, r24	; 37
    1102:	08 95       	ret

00001104 <TMR_timer2SetCompareMatchValue>:

void TMR_timer2SetCompareMatchValue(u8 OCR2_Value )
{
	//Init timer with Compare value
	
	OCR2 = OCR2_Value;
    1104:	83 bd       	out	0x23, r24	; 35
    1106:	08 95       	ret

00001108 <USS_Init>:


void USS_Init(void){
	

		DIO_SetPinDirection(USS_TriggerPort,USS_TriggerPin,DIO_PIN_OUTPUT);//trigger
    1108:	41 e0       	ldi	r20, 0x01	; 1
    110a:	61 e0       	ldi	r22, 0x01	; 1
    110c:	82 e0       	ldi	r24, 0x02	; 2
    110e:	0e 94 92 01 	call	0x324	; 0x324 <DIO_SetPinDirection>
		DIO_SetPinValue(USS_TriggerPort,USS_TriggerPin,DIO_PIN_LOW);
    1112:	40 e0       	ldi	r20, 0x00	; 0
    1114:	61 e0       	ldi	r22, 0x01	; 1
    1116:	82 e0       	ldi	r24, 0x02	; 2
    1118:	0e 94 08 02 	call	0x410	; 0x410 <DIO_SetPinValue>
		DIO_SetPinDirection(USS_EchoPort,USS_EchoPin,DIO_PIN_INPUT);//echo
    111c:	40 e0       	ldi	r20, 0x00	; 0
    111e:	60 e0       	ldi	r22, 0x00	; 0
    1120:	82 e0       	ldi	r24, 0x02	; 2
    1122:	0e 94 92 01 	call	0x324	; 0x324 <DIO_SetPinDirection>
		DIO_SetPinValue(USS_EchoPort,USS_EchoPin,DIO_PIN_LOW);
    1126:	40 e0       	ldi	r20, 0x00	; 0
    1128:	60 e0       	ldi	r22, 0x00	; 0
    112a:	82 e0       	ldi	r24, 0x02	; 2
    112c:	0e 94 08 02 	call	0x410	; 0x410 <DIO_SetPinValue>
		
        TMR_timer1init();
    1130:	0e 94 85 07 	call	0xf0a	; 0xf0a <TMR_timer1init>
    1134:	08 95       	ret

00001136 <USS_GetDistance>:

}


void USS_GetDistance(u32* Distance){
    1136:	cf 92       	push	r12
    1138:	df 92       	push	r13
    113a:	ef 92       	push	r14
    113c:	ff 92       	push	r15
    113e:	0f 93       	push	r16
    1140:	1f 93       	push	r17
    1142:	cf 93       	push	r28
    1144:	df 93       	push	r29
    1146:	1f 92       	push	r1
    1148:	cd b7       	in	r28, 0x3d	; 61
    114a:	de b7       	in	r29, 0x3e	; 62
    114c:	8c 01       	movw	r16, r24
	
	    TCNT1_u16=0; 
    114e:	1d bc       	out	0x2d, r1	; 45
    1150:	1c bc       	out	0x2c, r1	; 44
        u8 Echo;
		u32 time;
        DIO_GetPinValue(USS_EchoPort,USS_EchoPin,&Echo);
    1152:	ae 01       	movw	r20, r28
    1154:	4f 5f       	subi	r20, 0xFF	; 255
    1156:	5f 4f       	sbci	r21, 0xFF	; 255
    1158:	60 e0       	ldi	r22, 0x00	; 0
    115a:	82 e0       	ldi	r24, 0x02	; 2
    115c:	0e 94 7e 02 	call	0x4fc	; 0x4fc <DIO_GetPinValue>
	
		
		DIO_SetPinValue(USS_TriggerPort,USS_TriggerPin,DIO_PIN_HIGH);
    1160:	41 e0       	ldi	r20, 0x01	; 1
    1162:	61 e0       	ldi	r22, 0x01	; 1
    1164:	82 e0       	ldi	r24, 0x02	; 2
    1166:	0e 94 08 02 	call	0x410	; 0x410 <DIO_SetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    116a:	85 e3       	ldi	r24, 0x35	; 53
    116c:	8a 95       	dec	r24
    116e:	f1 f7       	brne	.-4      	; 0x116c <USS_GetDistance+0x36>
    1170:	00 00       	nop
		_delay_us(10);
		DIO_SetPinValue(USS_TriggerPort,USS_TriggerPin,DIO_PIN_LOW);
    1172:	40 e0       	ldi	r20, 0x00	; 0
    1174:	61 e0       	ldi	r22, 0x01	; 1
    1176:	82 e0       	ldi	r24, 0x02	; 2
    1178:	0e 94 08 02 	call	0x410	; 0x410 <DIO_SetPinValue>
		
	    while(!Echo){DIO_GetPinValue(USS_EchoPort,USS_EchoPin,&Echo);}// block for echo = 0
    117c:	07 c0       	rjmp	.+14     	; 0x118c <USS_GetDistance+0x56>
    117e:	ae 01       	movw	r20, r28
    1180:	4f 5f       	subi	r20, 0xFF	; 255
    1182:	5f 4f       	sbci	r21, 0xFF	; 255
    1184:	60 e0       	ldi	r22, 0x00	; 0
    1186:	82 e0       	ldi	r24, 0x02	; 2
    1188:	0e 94 7e 02 	call	0x4fc	; 0x4fc <DIO_GetPinValue>
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	88 23       	and	r24, r24
    1190:	b1 f3       	breq	.-20     	; 0x117e <USS_GetDistance+0x48>
			
		if(Echo){
    1192:	99 f1       	breq	.+102    	; 0x11fa <USS_GetDistance+0xc4>
			TMR_timer1start();
    1194:	0e 94 97 07 	call	0xf2e	; 0xf2e <TMR_timer1start>
			DIO_GetPinValue(USS_EchoPort,USS_EchoPin,&Echo);
    1198:	ae 01       	movw	r20, r28
    119a:	4f 5f       	subi	r20, 0xFF	; 255
    119c:	5f 4f       	sbci	r21, 0xFF	; 255
    119e:	60 e0       	ldi	r22, 0x00	; 0
    11a0:	82 e0       	ldi	r24, 0x02	; 2
    11a2:	0e 94 7e 02 	call	0x4fc	; 0x4fc <DIO_GetPinValue>
			while(Echo){DIO_GetPinValue(USS_EchoPort,USS_EchoPin,&Echo);}// block for echo = 1
    11a6:	07 c0       	rjmp	.+14     	; 0x11b6 <USS_GetDistance+0x80>
    11a8:	ae 01       	movw	r20, r28
    11aa:	4f 5f       	subi	r20, 0xFF	; 255
    11ac:	5f 4f       	sbci	r21, 0xFF	; 255
    11ae:	60 e0       	ldi	r22, 0x00	; 0
    11b0:	82 e0       	ldi	r24, 0x02	; 2
    11b2:	0e 94 7e 02 	call	0x4fc	; 0x4fc <DIO_GetPinValue>
    11b6:	89 81       	ldd	r24, Y+1	; 0x01
    11b8:	81 11       	cpse	r24, r1
    11ba:	f6 cf       	rjmp	.-20     	; 0x11a8 <USS_GetDistance+0x72>
			time=TCNT1_u16;// get time
    11bc:	cc b4       	in	r12, 0x2c	; 44
    11be:	dd b4       	in	r13, 0x2d	; 45
    11c0:	e1 2c       	mov	r14, r1
    11c2:	f1 2c       	mov	r15, r1
			TMR_timer1stop();
    11c4:	0e 94 a1 07 	call	0xf42	; 0xf42 <TMR_timer1stop>
			*Distance=(time*4*0.017);// convert time to cm
    11c8:	c7 01       	movw	r24, r14
    11ca:	b6 01       	movw	r22, r12
    11cc:	66 0f       	add	r22, r22
    11ce:	77 1f       	adc	r23, r23
    11d0:	88 1f       	adc	r24, r24
    11d2:	99 1f       	adc	r25, r25
    11d4:	66 0f       	add	r22, r22
    11d6:	77 1f       	adc	r23, r23
    11d8:	88 1f       	adc	r24, r24
    11da:	99 1f       	adc	r25, r25
    11dc:	0e 94 36 09 	call	0x126c	; 0x126c <__floatunsisf>
    11e0:	26 e9       	ldi	r18, 0x96	; 150
    11e2:	33 e4       	ldi	r19, 0x43	; 67
    11e4:	4b e8       	ldi	r20, 0x8B	; 139
    11e6:	5c e3       	ldi	r21, 0x3C	; 60
    11e8:	0e 94 9c 09 	call	0x1338	; 0x1338 <__mulsf3>
    11ec:	0e 94 07 09 	call	0x120e	; 0x120e <__fixunssfsi>
    11f0:	f8 01       	movw	r30, r16
    11f2:	60 83       	st	Z, r22
    11f4:	71 83       	std	Z+1, r23	; 0x01
    11f6:	82 83       	std	Z+2, r24	; 0x02
    11f8:	93 83       	std	Z+3, r25	; 0x03
		}	
		
	}
    11fa:	0f 90       	pop	r0
    11fc:	df 91       	pop	r29
    11fe:	cf 91       	pop	r28
    1200:	1f 91       	pop	r17
    1202:	0f 91       	pop	r16
    1204:	ff 90       	pop	r15
    1206:	ef 90       	pop	r14
    1208:	df 90       	pop	r13
    120a:	cf 90       	pop	r12
    120c:	08 95       	ret

0000120e <__fixunssfsi>:
    120e:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <__fp_splitA>
    1212:	88 f0       	brcs	.+34     	; 0x1236 <__fixunssfsi+0x28>
    1214:	9f 57       	subi	r25, 0x7F	; 127
    1216:	98 f0       	brcs	.+38     	; 0x123e <__fixunssfsi+0x30>
    1218:	b9 2f       	mov	r27, r25
    121a:	99 27       	eor	r25, r25
    121c:	b7 51       	subi	r27, 0x17	; 23
    121e:	b0 f0       	brcs	.+44     	; 0x124c <__fixunssfsi+0x3e>
    1220:	e1 f0       	breq	.+56     	; 0x125a <__fixunssfsi+0x4c>
    1222:	66 0f       	add	r22, r22
    1224:	77 1f       	adc	r23, r23
    1226:	88 1f       	adc	r24, r24
    1228:	99 1f       	adc	r25, r25
    122a:	1a f0       	brmi	.+6      	; 0x1232 <__fixunssfsi+0x24>
    122c:	ba 95       	dec	r27
    122e:	c9 f7       	brne	.-14     	; 0x1222 <__fixunssfsi+0x14>
    1230:	14 c0       	rjmp	.+40     	; 0x125a <__fixunssfsi+0x4c>
    1232:	b1 30       	cpi	r27, 0x01	; 1
    1234:	91 f0       	breq	.+36     	; 0x125a <__fixunssfsi+0x4c>
    1236:	0e 94 95 09 	call	0x132a	; 0x132a <__fp_zero>
    123a:	b1 e0       	ldi	r27, 0x01	; 1
    123c:	08 95       	ret
    123e:	0c 94 95 09 	jmp	0x132a	; 0x132a <__fp_zero>
    1242:	67 2f       	mov	r22, r23
    1244:	78 2f       	mov	r23, r24
    1246:	88 27       	eor	r24, r24
    1248:	b8 5f       	subi	r27, 0xF8	; 248
    124a:	39 f0       	breq	.+14     	; 0x125a <__fixunssfsi+0x4c>
    124c:	b9 3f       	cpi	r27, 0xF9	; 249
    124e:	cc f3       	brlt	.-14     	; 0x1242 <__fixunssfsi+0x34>
    1250:	86 95       	lsr	r24
    1252:	77 95       	ror	r23
    1254:	67 95       	ror	r22
    1256:	b3 95       	inc	r27
    1258:	d9 f7       	brne	.-10     	; 0x1250 <__fixunssfsi+0x42>
    125a:	3e f4       	brtc	.+14     	; 0x126a <__fixunssfsi+0x5c>
    125c:	90 95       	com	r25
    125e:	80 95       	com	r24
    1260:	70 95       	com	r23
    1262:	61 95       	neg	r22
    1264:	7f 4f       	sbci	r23, 0xFF	; 255
    1266:	8f 4f       	sbci	r24, 0xFF	; 255
    1268:	9f 4f       	sbci	r25, 0xFF	; 255
    126a:	08 95       	ret

0000126c <__floatunsisf>:
    126c:	e8 94       	clt
    126e:	09 c0       	rjmp	.+18     	; 0x1282 <__floatsisf+0x12>

00001270 <__floatsisf>:
    1270:	97 fb       	bst	r25, 7
    1272:	3e f4       	brtc	.+14     	; 0x1282 <__floatsisf+0x12>
    1274:	90 95       	com	r25
    1276:	80 95       	com	r24
    1278:	70 95       	com	r23
    127a:	61 95       	neg	r22
    127c:	7f 4f       	sbci	r23, 0xFF	; 255
    127e:	8f 4f       	sbci	r24, 0xFF	; 255
    1280:	9f 4f       	sbci	r25, 0xFF	; 255
    1282:	99 23       	and	r25, r25
    1284:	a9 f0       	breq	.+42     	; 0x12b0 <__floatsisf+0x40>
    1286:	f9 2f       	mov	r31, r25
    1288:	96 e9       	ldi	r25, 0x96	; 150
    128a:	bb 27       	eor	r27, r27
    128c:	93 95       	inc	r25
    128e:	f6 95       	lsr	r31
    1290:	87 95       	ror	r24
    1292:	77 95       	ror	r23
    1294:	67 95       	ror	r22
    1296:	b7 95       	ror	r27
    1298:	f1 11       	cpse	r31, r1
    129a:	f8 cf       	rjmp	.-16     	; 0x128c <__floatsisf+0x1c>
    129c:	fa f4       	brpl	.+62     	; 0x12dc <__floatsisf+0x6c>
    129e:	bb 0f       	add	r27, r27
    12a0:	11 f4       	brne	.+4      	; 0x12a6 <__floatsisf+0x36>
    12a2:	60 ff       	sbrs	r22, 0
    12a4:	1b c0       	rjmp	.+54     	; 0x12dc <__floatsisf+0x6c>
    12a6:	6f 5f       	subi	r22, 0xFF	; 255
    12a8:	7f 4f       	sbci	r23, 0xFF	; 255
    12aa:	8f 4f       	sbci	r24, 0xFF	; 255
    12ac:	9f 4f       	sbci	r25, 0xFF	; 255
    12ae:	16 c0       	rjmp	.+44     	; 0x12dc <__floatsisf+0x6c>
    12b0:	88 23       	and	r24, r24
    12b2:	11 f0       	breq	.+4      	; 0x12b8 <__floatsisf+0x48>
    12b4:	96 e9       	ldi	r25, 0x96	; 150
    12b6:	11 c0       	rjmp	.+34     	; 0x12da <__floatsisf+0x6a>
    12b8:	77 23       	and	r23, r23
    12ba:	21 f0       	breq	.+8      	; 0x12c4 <__floatsisf+0x54>
    12bc:	9e e8       	ldi	r25, 0x8E	; 142
    12be:	87 2f       	mov	r24, r23
    12c0:	76 2f       	mov	r23, r22
    12c2:	05 c0       	rjmp	.+10     	; 0x12ce <__floatsisf+0x5e>
    12c4:	66 23       	and	r22, r22
    12c6:	71 f0       	breq	.+28     	; 0x12e4 <__floatsisf+0x74>
    12c8:	96 e8       	ldi	r25, 0x86	; 134
    12ca:	86 2f       	mov	r24, r22
    12cc:	70 e0       	ldi	r23, 0x00	; 0
    12ce:	60 e0       	ldi	r22, 0x00	; 0
    12d0:	2a f0       	brmi	.+10     	; 0x12dc <__floatsisf+0x6c>
    12d2:	9a 95       	dec	r25
    12d4:	66 0f       	add	r22, r22
    12d6:	77 1f       	adc	r23, r23
    12d8:	88 1f       	adc	r24, r24
    12da:	da f7       	brpl	.-10     	; 0x12d2 <__floatsisf+0x62>
    12dc:	88 0f       	add	r24, r24
    12de:	96 95       	lsr	r25
    12e0:	87 95       	ror	r24
    12e2:	97 f9       	bld	r25, 7
    12e4:	08 95       	ret

000012e6 <__fp_split3>:
    12e6:	57 fd       	sbrc	r21, 7
    12e8:	90 58       	subi	r25, 0x80	; 128
    12ea:	44 0f       	add	r20, r20
    12ec:	55 1f       	adc	r21, r21
    12ee:	59 f0       	breq	.+22     	; 0x1306 <__fp_splitA+0x10>
    12f0:	5f 3f       	cpi	r21, 0xFF	; 255
    12f2:	71 f0       	breq	.+28     	; 0x1310 <__fp_splitA+0x1a>
    12f4:	47 95       	ror	r20

000012f6 <__fp_splitA>:
    12f6:	88 0f       	add	r24, r24
    12f8:	97 fb       	bst	r25, 7
    12fa:	99 1f       	adc	r25, r25
    12fc:	61 f0       	breq	.+24     	; 0x1316 <__fp_splitA+0x20>
    12fe:	9f 3f       	cpi	r25, 0xFF	; 255
    1300:	79 f0       	breq	.+30     	; 0x1320 <__fp_splitA+0x2a>
    1302:	87 95       	ror	r24
    1304:	08 95       	ret
    1306:	12 16       	cp	r1, r18
    1308:	13 06       	cpc	r1, r19
    130a:	14 06       	cpc	r1, r20
    130c:	55 1f       	adc	r21, r21
    130e:	f2 cf       	rjmp	.-28     	; 0x12f4 <__fp_split3+0xe>
    1310:	46 95       	lsr	r20
    1312:	f1 df       	rcall	.-30     	; 0x12f6 <__fp_splitA>
    1314:	08 c0       	rjmp	.+16     	; 0x1326 <__fp_splitA+0x30>
    1316:	16 16       	cp	r1, r22
    1318:	17 06       	cpc	r1, r23
    131a:	18 06       	cpc	r1, r24
    131c:	99 1f       	adc	r25, r25
    131e:	f1 cf       	rjmp	.-30     	; 0x1302 <__fp_splitA+0xc>
    1320:	86 95       	lsr	r24
    1322:	71 05       	cpc	r23, r1
    1324:	61 05       	cpc	r22, r1
    1326:	08 94       	sec
    1328:	08 95       	ret

0000132a <__fp_zero>:
    132a:	e8 94       	clt

0000132c <__fp_szero>:
    132c:	bb 27       	eor	r27, r27
    132e:	66 27       	eor	r22, r22
    1330:	77 27       	eor	r23, r23
    1332:	cb 01       	movw	r24, r22
    1334:	97 f9       	bld	r25, 7
    1336:	08 95       	ret

00001338 <__mulsf3>:
    1338:	0e 94 af 09 	call	0x135e	; 0x135e <__mulsf3x>
    133c:	0c 94 20 0a 	jmp	0x1440	; 0x1440 <__fp_round>
    1340:	0e 94 12 0a 	call	0x1424	; 0x1424 <__fp_pscA>
    1344:	38 f0       	brcs	.+14     	; 0x1354 <__mulsf3+0x1c>
    1346:	0e 94 19 0a 	call	0x1432	; 0x1432 <__fp_pscB>
    134a:	20 f0       	brcs	.+8      	; 0x1354 <__mulsf3+0x1c>
    134c:	95 23       	and	r25, r21
    134e:	11 f0       	breq	.+4      	; 0x1354 <__mulsf3+0x1c>
    1350:	0c 94 09 0a 	jmp	0x1412	; 0x1412 <__fp_inf>
    1354:	0c 94 0f 0a 	jmp	0x141e	; 0x141e <__fp_nan>
    1358:	11 24       	eor	r1, r1
    135a:	0c 94 96 09 	jmp	0x132c	; 0x132c <__fp_szero>

0000135e <__mulsf3x>:
    135e:	0e 94 73 09 	call	0x12e6	; 0x12e6 <__fp_split3>
    1362:	70 f3       	brcs	.-36     	; 0x1340 <__mulsf3+0x8>

00001364 <__mulsf3_pse>:
    1364:	95 9f       	mul	r25, r21
    1366:	c1 f3       	breq	.-16     	; 0x1358 <__mulsf3+0x20>
    1368:	95 0f       	add	r25, r21
    136a:	50 e0       	ldi	r21, 0x00	; 0
    136c:	55 1f       	adc	r21, r21
    136e:	62 9f       	mul	r22, r18
    1370:	f0 01       	movw	r30, r0
    1372:	72 9f       	mul	r23, r18
    1374:	bb 27       	eor	r27, r27
    1376:	f0 0d       	add	r31, r0
    1378:	b1 1d       	adc	r27, r1
    137a:	63 9f       	mul	r22, r19
    137c:	aa 27       	eor	r26, r26
    137e:	f0 0d       	add	r31, r0
    1380:	b1 1d       	adc	r27, r1
    1382:	aa 1f       	adc	r26, r26
    1384:	64 9f       	mul	r22, r20
    1386:	66 27       	eor	r22, r22
    1388:	b0 0d       	add	r27, r0
    138a:	a1 1d       	adc	r26, r1
    138c:	66 1f       	adc	r22, r22
    138e:	82 9f       	mul	r24, r18
    1390:	22 27       	eor	r18, r18
    1392:	b0 0d       	add	r27, r0
    1394:	a1 1d       	adc	r26, r1
    1396:	62 1f       	adc	r22, r18
    1398:	73 9f       	mul	r23, r19
    139a:	b0 0d       	add	r27, r0
    139c:	a1 1d       	adc	r26, r1
    139e:	62 1f       	adc	r22, r18
    13a0:	83 9f       	mul	r24, r19
    13a2:	a0 0d       	add	r26, r0
    13a4:	61 1d       	adc	r22, r1
    13a6:	22 1f       	adc	r18, r18
    13a8:	74 9f       	mul	r23, r20
    13aa:	33 27       	eor	r19, r19
    13ac:	a0 0d       	add	r26, r0
    13ae:	61 1d       	adc	r22, r1
    13b0:	23 1f       	adc	r18, r19
    13b2:	84 9f       	mul	r24, r20
    13b4:	60 0d       	add	r22, r0
    13b6:	21 1d       	adc	r18, r1
    13b8:	82 2f       	mov	r24, r18
    13ba:	76 2f       	mov	r23, r22
    13bc:	6a 2f       	mov	r22, r26
    13be:	11 24       	eor	r1, r1
    13c0:	9f 57       	subi	r25, 0x7F	; 127
    13c2:	50 40       	sbci	r21, 0x00	; 0
    13c4:	9a f0       	brmi	.+38     	; 0x13ec <__mulsf3_pse+0x88>
    13c6:	f1 f0       	breq	.+60     	; 0x1404 <__mulsf3_pse+0xa0>
    13c8:	88 23       	and	r24, r24
    13ca:	4a f0       	brmi	.+18     	; 0x13de <__mulsf3_pse+0x7a>
    13cc:	ee 0f       	add	r30, r30
    13ce:	ff 1f       	adc	r31, r31
    13d0:	bb 1f       	adc	r27, r27
    13d2:	66 1f       	adc	r22, r22
    13d4:	77 1f       	adc	r23, r23
    13d6:	88 1f       	adc	r24, r24
    13d8:	91 50       	subi	r25, 0x01	; 1
    13da:	50 40       	sbci	r21, 0x00	; 0
    13dc:	a9 f7       	brne	.-22     	; 0x13c8 <__mulsf3_pse+0x64>
    13de:	9e 3f       	cpi	r25, 0xFE	; 254
    13e0:	51 05       	cpc	r21, r1
    13e2:	80 f0       	brcs	.+32     	; 0x1404 <__mulsf3_pse+0xa0>
    13e4:	0c 94 09 0a 	jmp	0x1412	; 0x1412 <__fp_inf>
    13e8:	0c 94 96 09 	jmp	0x132c	; 0x132c <__fp_szero>
    13ec:	5f 3f       	cpi	r21, 0xFF	; 255
    13ee:	e4 f3       	brlt	.-8      	; 0x13e8 <__mulsf3_pse+0x84>
    13f0:	98 3e       	cpi	r25, 0xE8	; 232
    13f2:	d4 f3       	brlt	.-12     	; 0x13e8 <__mulsf3_pse+0x84>
    13f4:	86 95       	lsr	r24
    13f6:	77 95       	ror	r23
    13f8:	67 95       	ror	r22
    13fa:	b7 95       	ror	r27
    13fc:	f7 95       	ror	r31
    13fe:	e7 95       	ror	r30
    1400:	9f 5f       	subi	r25, 0xFF	; 255
    1402:	c1 f7       	brne	.-16     	; 0x13f4 <__mulsf3_pse+0x90>
    1404:	fe 2b       	or	r31, r30
    1406:	88 0f       	add	r24, r24
    1408:	91 1d       	adc	r25, r1
    140a:	96 95       	lsr	r25
    140c:	87 95       	ror	r24
    140e:	97 f9       	bld	r25, 7
    1410:	08 95       	ret

00001412 <__fp_inf>:
    1412:	97 f9       	bld	r25, 7
    1414:	9f 67       	ori	r25, 0x7F	; 127
    1416:	80 e8       	ldi	r24, 0x80	; 128
    1418:	70 e0       	ldi	r23, 0x00	; 0
    141a:	60 e0       	ldi	r22, 0x00	; 0
    141c:	08 95       	ret

0000141e <__fp_nan>:
    141e:	9f ef       	ldi	r25, 0xFF	; 255
    1420:	80 ec       	ldi	r24, 0xC0	; 192
    1422:	08 95       	ret

00001424 <__fp_pscA>:
    1424:	00 24       	eor	r0, r0
    1426:	0a 94       	dec	r0
    1428:	16 16       	cp	r1, r22
    142a:	17 06       	cpc	r1, r23
    142c:	18 06       	cpc	r1, r24
    142e:	09 06       	cpc	r0, r25
    1430:	08 95       	ret

00001432 <__fp_pscB>:
    1432:	00 24       	eor	r0, r0
    1434:	0a 94       	dec	r0
    1436:	12 16       	cp	r1, r18
    1438:	13 06       	cpc	r1, r19
    143a:	14 06       	cpc	r1, r20
    143c:	05 06       	cpc	r0, r21
    143e:	08 95       	ret

00001440 <__fp_round>:
    1440:	09 2e       	mov	r0, r25
    1442:	03 94       	inc	r0
    1444:	00 0c       	add	r0, r0
    1446:	11 f4       	brne	.+4      	; 0x144c <__fp_round+0xc>
    1448:	88 23       	and	r24, r24
    144a:	52 f0       	brmi	.+20     	; 0x1460 <__fp_round+0x20>
    144c:	bb 0f       	add	r27, r27
    144e:	40 f4       	brcc	.+16     	; 0x1460 <__fp_round+0x20>
    1450:	bf 2b       	or	r27, r31
    1452:	11 f4       	brne	.+4      	; 0x1458 <__fp_round+0x18>
    1454:	60 ff       	sbrs	r22, 0
    1456:	04 c0       	rjmp	.+8      	; 0x1460 <__fp_round+0x20>
    1458:	6f 5f       	subi	r22, 0xFF	; 255
    145a:	7f 4f       	sbci	r23, 0xFF	; 255
    145c:	8f 4f       	sbci	r24, 0xFF	; 255
    145e:	9f 4f       	sbci	r25, 0xFF	; 255
    1460:	08 95       	ret

00001462 <__udivmodsi4>:
    1462:	a1 e2       	ldi	r26, 0x21	; 33
    1464:	1a 2e       	mov	r1, r26
    1466:	aa 1b       	sub	r26, r26
    1468:	bb 1b       	sub	r27, r27
    146a:	fd 01       	movw	r30, r26
    146c:	0d c0       	rjmp	.+26     	; 0x1488 <__udivmodsi4_ep>

0000146e <__udivmodsi4_loop>:
    146e:	aa 1f       	adc	r26, r26
    1470:	bb 1f       	adc	r27, r27
    1472:	ee 1f       	adc	r30, r30
    1474:	ff 1f       	adc	r31, r31
    1476:	a2 17       	cp	r26, r18
    1478:	b3 07       	cpc	r27, r19
    147a:	e4 07       	cpc	r30, r20
    147c:	f5 07       	cpc	r31, r21
    147e:	20 f0       	brcs	.+8      	; 0x1488 <__udivmodsi4_ep>
    1480:	a2 1b       	sub	r26, r18
    1482:	b3 0b       	sbc	r27, r19
    1484:	e4 0b       	sbc	r30, r20
    1486:	f5 0b       	sbc	r31, r21

00001488 <__udivmodsi4_ep>:
    1488:	66 1f       	adc	r22, r22
    148a:	77 1f       	adc	r23, r23
    148c:	88 1f       	adc	r24, r24
    148e:	99 1f       	adc	r25, r25
    1490:	1a 94       	dec	r1
    1492:	69 f7       	brne	.-38     	; 0x146e <__udivmodsi4_loop>
    1494:	60 95       	com	r22
    1496:	70 95       	com	r23
    1498:	80 95       	com	r24
    149a:	90 95       	com	r25
    149c:	9b 01       	movw	r18, r22
    149e:	ac 01       	movw	r20, r24
    14a0:	bd 01       	movw	r22, r26
    14a2:	cf 01       	movw	r24, r30
    14a4:	08 95       	ret

000014a6 <_exit>:
    14a6:	f8 94       	cli

000014a8 <__stop_program>:
    14a8:	ff cf       	rjmp	.-2      	; 0x14a8 <__stop_program>
